/**
 * Created by gimbyeongjin on 14. 11. 14..
 */

define('service/applyCommonItemAttribute',['app'
], function(app) {
    app.factory('applyCommonItemAttribute', [ function () {

        var att = {
            'fill' : fill,
            'outline' : outline,
            'radius' : radius,
            'rotate' : rotate,
            'alpha' : alpha,
            'all' : all,
            'pos' : pos,
            'size' : size,
            'zOrder' : zOrder,
            'alphaLine' : alphaLine,
            'fillLine' : fillLine
        };
        return att;
    }]);

    function HexTo10(Hex){
        return parseInt(Hex, 16).toString(10);
    }

    function fill(element, item) {
        if(typeof item.alpha !== 'undefined') {
            element.css({
                'background-color': 'rgba(' + HexTo10(item.fill.color.R) + ', ' + HexTo10(item.fill.color.G) + ', ' + HexTo10(item.fill.color.B) + ', ' + item.alpha / 100 + ')'
            });
        }
        else{
            element.css({
                'background-color' : 'rgba(' + HexTo10(item.fill.color.R) + ', '+ HexTo10(item.fill.color.G)+', '+HexTo10(item.fill.color.B)+', '+1+')'
            });
        }
    }

    function fillLine(element) {
        element.css({
            'background-color': 'rgba(0,0,0,0)'
        });
    }

    function outline(element, item) {
        if(typeof item.alpha !== 'undefined') {
            element.css({
                'border': "10px solid #ffffff",
                'border-width': item.outline.weight + "px",
                'border-color': 'rgba(' + HexTo10(item.outline.color.R) + ', ' + HexTo10(item.outline.color.G) + ', ' + HexTo10(item.outline.color.B) + ', ' + item.alpha / 100 + ')'
            });
        }
        else {
            element.css({
                'border': "10px solid #ffffff",
                'border-width': item.outline.weight + "px",
                'border-color': 'rgba(' + HexTo10(item.outline.color.R) + ', ' + HexTo10(item.outline.color.G) + ', ' + HexTo10(item.outline.color.B) + ', ' + 1 + ')'
            });
        }
    }

    function radius(element, item) {
        element.css({
            'border-radius': item.radius + "px"
        });
    }

    function rotate(element, item) {
        var r = 'rotate(' + item.rotate + 'deg)';
        element.css({
            '-webkit-transform': r,
            'transform': r
        });
    }

    function alpha(element, item){
        if(item.alpha) {
            element.css({
                'background-color': 'rgba(' + HexTo10(item.fill.color.R) + ', ' + HexTo10(item.fill.color.G) + ', ' + HexTo10(item.fill.color.B) + ', ' + item.alpha / 100 + ')',
                'border-color': 'rgba(' + HexTo10(item.outline.color.R) + ', ' + HexTo10(item.outline.color.G) + ', ' + HexTo10(item.outline.color.B) + ', ' + item.alpha / 100 + ')'
            });
        }
    }

    function alphaLine(element){
        element.css({
            'background-color': 'rgba(0,0,0,0)',
            'border-color': 'rgba(0,0,0,0)'
        });
    }

    function pos(element, item){
//        if( !(item.pos.x == element[0].offsetLeft && item.pos.y == element[0].offsetTop) )
        {
            element.css({
                top: item.pos.y + "px",
                left: item.pos.x + "px"
            });
        }
    }

    function size(element, item){
        element.css({
            width: item.size.width + "px",
            height: item.size.height + "px"
        });
    }

    function zOrder(element, item){
        element.css({
            'z-Index': item.zOrder
        });
    }

    function all(element, item) {
        fill(element, item);
        outline(element, item);
        radius(element, item);
        rotate(element, item);
        alpha(element, item);
        pos(element, item);
        size(element, item);
        zOrder(element, item);
    }
});
/**
 * Created by gimbyeongjin on 14. 11. 14..
 */

define('service/CommonCallback',['app'
], function(app) {
    app.factory('CommonCallback', [ function () {
        return function(data, successCallback) {
            var stateText = "";
            // Error
            if(data === null){
                stateText = "서버와의 연결이 되지 않았습니다.";
//                alert(stateText);
            }
            // Success
            else if (data.returnCode === '000') {
                stateText = "성공하였습니다.";
                successCallback();    // 성공 시 실행되어야하는 콜백 함수
            }
            // Invalid Arguments
            else if (data.returnCode === '001') {
                stateText = "오류 발생";
//                alert(stateText);
            }
            // Not Login
            else if (data.returnCode === '002') {
                stateText = "로그인이 안되어있습니다.";
//                alert(stateText);
                window.location.href = "../partials/login.html";
            }
            else{
                stateText = "파싱 오류 발생";
                console.log(stateText);
                console.log(data);
            }
//            console.log(stateText);
        };
    }]);
});
/**
 * Created by gimbyeongjin on 14. 10. 23..
 */
define('service/serverURL',['app'], function(app) {
    app.value('serverURL', 'http://104.155.200.239:8124');
});
/**
 * Created by gimbyeongjin on 14. 11. 11..
 */

define('service/createPortfolio',['app','service/serverURL'], function(app) {
    app.factory('createPortfolio', ['serverURL', function (serverURL) {
        return function ($http, data, callback) {
            $http({
                method: 'POST',
                url: serverURL + '/portfolio',
                data: data,
                responseType: 'json',
                withCredentials: true
            }).success(function (data) {
                callback(data);
            }).error(function (data){
                callback(data);
            });
        };
    }]);
});
/**
 * Created by JEONGBORAM-PC-W1 on 2014-12-04.
 */
define('service/deleteImage',['app','service/serverURL'], function(app) {
    app.factory('deleteImage', function ($http, serverURL) {
        return function (data, callback) {
            $http({
                method: 'DELETE',
                url: serverURL + '/image',
                data: data,
                responseType: 'json',
                withCredentials: true,
                headers: {
                    'Content-Type': 'application/json'
                }
            }).success(function (data) {
                callback(data);
            }).error(function(data) {
                callback(data);
            });
        };
    });
});
/**
 * Created by JEONGBORAM-PC-W1 on 2014-12-04.
 */
define('service/deletePaper',['app','service/serverURL'], function(app) {
    app.factory('deletePaper', ['serverURL', function (serverURL) {
        return function ($http, data, callback) {
            $http({
                method: 'DELETE',
                url: serverURL + '/portfolio/paper',
                data: data,
                responseType: 'json',
                withCredentials: true,
                headers: {
                    'Content-Type': 'application/json'
                }
            }).success(function (data) {
                callback(data);
            }).error(function(data) {
                callback(data);
            });
        };
    }]);
});
/**
 * Created by gimbyeongjin on 14. 11. 11..
 */

define('service/deletePortfolio',['app','service/serverURL'], function(app) {
    app.factory('deletePortfolio', ['serverURL', function (serverURL) {
        return function ($http, data, callback) {
            $http({
                method: 'DELETE',
                url: serverURL + '/portfolio',
                data: data,
                responseType: 'json',
                withCredentials: true,
                headers: {
                    'Content-Type': 'application/json'
                }
            }).success(function (data) {
                callback(data);
            }).error(function(data) {
                callback(data);
            });
        };
    }]);
});
/**
 * Created by JEONGBORAM-PC-W1 on 2014-11-20.
 */

define('service/deleteTemplate',['app','service/serverURL'], function(app) {
    app.factory('DeleteTemplate', ['serverURL', function (serverURL) {
        return function ($http, id, callback) {
            $http({
                method: 'DELETE',
                url: serverURL + '/template',
                data: {_id: id},
                responseType: 'json',
                withCredentials: true,
                headers: {
                    'Content-Type': 'application/json'
                }
            }).success(function (data) {
                callback(data);
            }).error(function(data) {
                callback(data);
            });
        };
    }]);
});
/**
 * Created by careerBox on 2014-11-11.
 */



define('classes/Structs/Size',[], function () {

    function Size(props) {
        this.width = 100;
        this.height = 100;

        if (props) {
            this.width = Number((props.width!==undefined) ? props.width : this.width);
            this.height = Number((props.height!==undefined) ? props.height : this.height);
        }
    }

    return Size;
});
/**
 * Created by careerBox on 2014-11-11.
 */



define('classes/Structs/Color',[], function () {

    function Color(colorCode) {
        this.R = 'FF';
        this.G = 'FF';
        this.B = 'FF';

        if ( colorCode && (typeof colorCode) === 'string' ) {
            this.R = colorCode.substr(0, 2);
            this.G = colorCode.substr(2, 2);
            this.B = colorCode.substr(4, 2);
        } else if ( colorCode ) {
            this.R = colorCode.R;
            this.G = colorCode.G;
            this.B = colorCode.B;
        }
    }

    Color.prototype.getColorCode = function getColorCode() {
        return (this.R + this.G + this.B);
    };

    Color.WHITE = new Color('FFFFFF');
    Color.BLACK = new Color('000000');

    return Color;

});
/**
 * Created by careerBox on 2014-11-11.
 */



define('classes/Structs/Fill',['classes/Structs/Color'], function (Color) {

    function Fill(props) {
        this.use = true;
        this.color = new Color('FFFFFF');

        if (props) {
            this.use = (props.use!==undefined) ? props.use : this.use;
            this.color = new Color(props.color ? props.color : this.color);
        }
    }

    return Fill;

});
/**
 * Created by careerBox on 2014-11-11.
 */



define('classes/Paper',[
    'classes/Structs/Size',
    'classes/Structs/Fill'
], function (Size, Fill) {

    function Paper(props) {
        this._id = null;
        this._portfolio_id = null;
        this.title = '';
        this.description = '';
        this.childArr = [];
        this.fill = new Fill();
        this.size = new Size({
            width: 960,
            height: 1358
        });
        this.isIndex = false;

        //server only
        this._member_id = null;

        if ( props ) {
            this._id = props._id ? props._id : this._id;
            this._portfolio_id = props._portfolio_id ? props._portfolio_id : this._portfolio_id;
            this.title = props.title ? props.title : this.title;
            this.description = props.description ? props.description : this.description;
            this.childArr = props.childArr ? props.childArr : this.childArr;
            this.fill = new Fill(props.fill ? props.fill : this.fill);
            this.size = new Size(props.size ? props.size : this.size);
            this.isIndex = (props.isIndex!==undefined) ? props.isIndex : this.isIndex;

            this._member_id = props._member_id ? props._member_id : this._member_id;
        }
    }

    return Paper;
});
/**
 * Created by careerBox on 2014-11-11.
 */



define('classes/Portfolio',[], function () {

    function Portfolio(props) {

        this._id = null;
        this.title = '';
        this.timestamp = new Date();
        this.description = '';
        this.thumbnail = null;
        this.papers = [];

        // server only
        this._member_id = null;

        if (props) {
            this._id = props._id ? props._id : null;
            this.title = props.title ? props.title : this.title;
            this.timestamp = new Date(props.timestamp ? props.timestamp : this.timestamp);
            this.description = props.description ? props.description : this.description;
            this.thumbnail = props.thumbnail ? props.thumbnail : this.thumbnail;
            this.papers = props.papers ? props.papers : this.papers;

            this._member_id = props._member_id ? props._member_id : this._member_id;
        }
    }

    return Portfolio;
});
/**
 * Created by careerBox on 2014-11-11.
 */



define('classes/Util',[], function () {
    var Util = {};

    /**
     * @function getClass
     * @param obj
     * @returns {*}
     *
     * get a classname
     */
    Util.getClass = function getClass(obj) {
        if (obj && obj.constructor && obj.constructor.toString) {
            var arr = obj.constructor.toString().match(/function\s*(\w+)/);

            if (arr && arr.length === 2) {
                return arr[1];
            }
        }

        return undefined;
    };

    /**
     * @function inherit
     * @param subCls
     * @param superCls
     * @return {Object}
     *
     * make subclasses from superclass
     */
    Util.inherit = function inherit(subCls, superCls, props) {
        subCls.prototype = Object.create(superCls.prototype, props);
        subCls.prototype.constructor = superCls;

        return subCls;
    };

    return Util;
});
/**
 * Created by careerBox on 2014-11-11.
 */



define('classes/Structs/Position',[], function () {

    function Position(props) {
        this.x = 0;
        this.y = 0;

        if (props) {
            this.x = Number((props.x!==undefined) ? props.x : this.x);
            this.y = Number((props.y!==undefined) ? props.y : this.y);
        }
    }

    return Position;
});
/**
 * Created by careerBox on 2014-11-11.
 */



define('classes/Structs/Outline',['classes/Structs/Color'], function (Color) {

    function Outline(props) {
        this.use = true;
        this.color = new Color('000000');
        this.weight = 1;

        if (props) {
            this.use = (props.use!==undefined) ? props.use : this.use;
            this.color = new Color(props.color ? props.color : this.color);
            this.weight = Number((props.weight!==undefined) ? props.weight : this.weight);
        }
    }

    return Outline;
});
/**
 * Created by careerBox on 2014-11-21.
 */



define('classes/Enums/LayoutComponentType',[], function () {

    var LayoutCompnentType = {
        article: 'article',
        item: 'item'
    };

    return LayoutCompnentType;
});
/**
 * Created by careerBox on 2014-11-12.
 */



define('classes/LayoutComponents/LayoutComponent',[
    'classes/Structs/Size',
    'classes/Structs/Position',
    'classes/Structs/Outline',
    'classes/Structs/Fill',
    'classes/Enums/LayoutComponentType'
], function (Size, Position, Outline, Fill, LayoutComponentType) {

    function LayoutComponent(props) {
        this._id = null;
        this.layoutComponentType = LayoutComponentType.item;
        this.zOrder = 0;
        this.size = new Size();
        this.pos = new Position();
        this.fill = new Fill();
        this.outline = new Outline();
        this.radius = 0;
        this.bindingType = '';
        this.isBinding = false;
        this.bindingData = [];
        this.alpha = 100;

        if (props) {
            this._id = props._id ? props._id : this._id;
            this.layoutComponentType = props.layoutComponentType ? props.layoutComponentType : this.layoutComponentType;
            this.zOrder = Number((props.zOrder !== undefined) ? props.zOrder : this.zOrder);
            this.size = new Size(props.size ? props.size : this.size);
            this.pos = new Position(props.pos ? props.pos : this.pos);
            this.fill = new Fill(props.fill ? props.fill : this.fill);
            this.outline = new Outline(props.outline ? props.outline : this.outline);
            this.radius = Number((props.radius !== undefined) ? props.radius : this.radius);
            this.isBinding = (props.isBinding !== undefined) ? props.isBinding : this.isBinding;
            this.bindingData = props.bindingData ? props.bindingData : this.bindingData;
            this.alpha = Number((props.alpha !== undefined) ? props.alpha : this.alpha);

            if (props.bindingType) {
                if (typeof props.bindingType === 'object') {
                    this.bindingType = {
                        title: props.bindingType.title,
                        infoType: props.bindingType.infoType
                    };
                } else {
                    this.bindingType = props.bindingType;
                }
            }
        }
    }

    return LayoutComponent;
});
/**
 * Created by careerBox on 2014-11-11.
 */



define('classes/Enums/ItemType',[], function () {

    var ItemType = {
        line: 'line',
        shape: 'shape',
        text: 'text',
        image: 'image',
        link: 'link',
        icon: 'icon'
    };

    return ItemType;
});
/**
 * Created by careerBox on 2014-11-15.
 */



define('classes/Enums/IconType',[], function () {
    var IconType = {
        asterisk: 'asterisk',
        plus: 'plus',
        euro: 'euro',
        minus: 'minus',
        cloud: 'cloud',
        envelope: 'envelope',
        pencil: 'pencil',
        glass: 'glass',
        music: 'music',
        search: 'search',
        heart: 'heart',
        star: 'star',
        star_empty: 'star_empty',
        user: 'user',
        film: 'film',
        th_large: 'th_large'
    };

    return IconType;
});
/**
 * Created by careerBox on 2014-12-15.
 */



define('classes/Enums/InfoType',[], function () {

    var InfoType = {
        personalInfo: 'personalInfo',
        additionalInfo: 'additionalInfo',
        highSchoolInfo: 'highSchoolInfo',
        univSchoolInfo: 'univSchoolInfo',
        workingInfo: 'workingInfo',

        certificationAbilityInfo: 'certificationAbilityInfo',
        proficiencyInfo: 'proficiencyInfo',
        computerAbilityInfo: 'computerAbilityInfo',
        paperAbilityInfo: 'paperAbilityInfo',

        scholarshipInfo: 'scholarshipInfo',
        awardInfo: 'awardInfo',

        localActivityInfo: 'localActivityInfo',
        globalActivityInfo: 'globalActivityInfo',

        projectInfo: 'projectInfo',
        columnInfo: 'columnInfo'
    };

    return InfoType;
});
/**
 * Created by careerBox on 2014-12-15.
 */



define('classes/Info/InfoClass',[
    'classes/Enums/InfoType'
], function (InfoType) {

    function InfoClass(props) {
        this._id = null;
        this._member_id = null;
        this.infoType = InfoType.personalInfo;
        this.title = '';

        if ( props ) {
            this._id = props._id ? props._id : this._id;
            this._member_id = props._member_id ? props._member_id : this._member_id;
            this.infoType = props.infoType ? props.infoType : this.infoType;
        }

    }

    return InfoClass;
});
/**
 * Created by careerBox on 2014-11-11.
 */



define('classes/LayoutComponents/Items/Item',[
    'classes/Util',
    'classes/Enums/ItemType',
    'classes/Enums/LayoutComponentType',
    'classes/LayoutComponents/LayoutComponent',
    'classes/Info/InfoClass'
], function (Util, ItemType, LayoutComponentType, LayoutComponent) {

    function Item(props) {
        LayoutComponent.call(this, props);

        this.layoutComponentType = LayoutComponentType.item;
        this.itemType = ItemType.shape;
        this.rotate = 0;

        if (props) {
            this.itemType = props.itemType ? props.itemType : this.itemType;
            this.rotate = Number((props.rotate!==undefined) ? props.rotate : this.rotate);
        }
    }

    Util.inherit(Item, LayoutComponent);

    return Item;
});
/**
 * Created by careerBox on 2014-11-15.
 */



define('classes/LayoutComponents/Items/Icon',[
    'classes/Util',
    'classes/Enums/IconType',
    'classes/Enums/ItemType',
    'classes/LayoutComponents/Items/Item'
], function (Util, IconType, ItemType, Item) {

    function Icon(props) {
        Item.call(this, props);

        this.itemType = ItemType.icon;
        this.iconType = IconType.asterisk;

        if (props) {
            this.iconType = props.iconType ? props.iconType : this.iconType;
        }
    }

    Util.inherit(Icon, Item);

    return Icon;
});
/**
 * Created by careerBox on 2014-11-11.
 */



define('classes/LayoutComponents/Items/Image',[
    'classes/Util',
    'classes/Enums/ItemType',
    'classes/LayoutComponents/Items/Item'
], function (Util, ItemType, Item) {

    function Image(props) {
        Item.call(this, props);

        this.itemType = ItemType.image;
        this.name = '';
        this.thumbnail = '';

        if (props) {
            this.name = props.name ? props.name : this.name;
            this.thumbnail = props.thumbnail ? props.thumbnail : this.thumbnail;
        }
    }

    Util.inherit(Image, Item);

    return Image;
});
/**
 * Created by careerBox on 2014-11-11.
 */



define('classes/Enums/Direction',[], function () {
    var Direction = {
        start: 'start',
        end: 'end',
        both: 'both'
    };

    return Direction;
});
/**
 * Created by careerBox on 2014-11-12.
 */



define('classes/Structs/Arrow',['classes/Enums/Direction'], function (Direction) {

    function Arrow(props) {
        this.use = false;
        this.direction = Direction.end;

        if (props) {
            this.use = (props.use!==undefined) ? props.use : this.use;
            this.direction = props.direction ? props.direction : this.direction;
        }
    }

    return Arrow;
});
/**
 * Created by careerBox on 2014-11-12.
 */



define('classes/LayoutComponents/Items/Line',[
    'classes/Util',
    'classes/Structs/Arrow',
    'classes/Structs/Position',
    'classes/Enums/ItemType',
    'classes/LayoutComponents/Items/Item'
], function (Util, Arrow, Position, ItemType, Item) {

    function Line(props) {
        Item.call(this, props);

        this.itemType = ItemType.line;
        this.arrow = new Arrow();
        this.pos_start = new Position();
        this.pos_end = new Position();

        if (props) {
            this.arrow = new Arrow(props.arrow ? props.arrow : this.arrow);
            this.pos_start = new Position(props.pos_start ? props.pos_start : this.pos_start);
            this.pos_end = new Position(props.pos_end ? props.pos_end : this.pos_end);
        }
    }

    Util.inherit(Line, Item);

    return Line;
});
/**
 * Created by careerBox on 2014-11-11.
 */



define('classes/Enums/Align',[], function () {

    var Align = {
        left: 'left',
        center: 'center',
        right: 'right'
    };

    return Align;
});
/**
 * Created by careerBox on 2014-11-11.
 */




define('classes/Enums/VerticalAlign',[], function () {
    var VerticalAlign = {
        top: 'top',
        middle: 'middle',
        bottom: 'bottom'
    };

    return VerticalAlign;
});
/**
 * Created by careerBox on 2014-11-11.
 */



define('classes/Structs/Font',['classes/Structs/Color'], function (Color) {

    function Font(props) {
        this.color = new Color('000000');
        this.size = 11;
        this.family = 'nanum gothic';

        this.italic = false;
        this.bold = false;

        if (props) {
            this.color = new Color(props.color ? props.color : this.color);
            this.size = Number((props.size!==undefined) ? props.size : this.size);
            this.family = props.family ? props.family : this.family;
            this.italic = (props.italic!==undefined) ? props.italic : this.italic;
            this.bold = (props.bold!==undefined) ? props.bold : this.bold;
        }
    }

    return Font;
});
/**
 * Created by careerBox on 2014-11-11.
 */



define('classes/LayoutComponents/Items/Text',[
    'classes/Util',
    'classes/LayoutComponents/Items/Item',
    'classes/Enums/Align',
    'classes/Enums/VerticalAlign',
    'classes/Enums/ItemType',
    'classes/Structs/Font'
], function (Util, Item, Align, VerticalAlign, ItemType, Font) {

    function Text(props) {
        Item.call(this, props);

        this.itemType = ItemType.text;
        this.value = 'Text';
        this.font = new Font();
        this.align = Align.left;
        this.vAlign = VerticalAlign.middle;

        if (props) {
            this.value = props.value ? props.value : this.value;
            this.font = new Font(props.font ? props.font : this.font);
            this.align = props.align ? props.align : this.align;
            this.vAlign = props.vAlign ? props.vAlign : this.vAlign;
        }
    }

    Util.inherit(Text, Item);

    return Text;
});

/**
 * Created by careerBox on 2014-11-11.
 */



define('classes/LayoutComponents/Items/Link',[
    'classes/Util',
    'classes/Enums/ItemType',
    'classes/LayoutComponents/Items/Text'

], function (Util, ItemType, Text) {

    function Link(props) {
        Text.call(this, props);

        this.itemType = ItemType.link;
        this.name = '';
        this.url = 'about:blank';
        this.isOutURL = true;
        this.isNewWindow = false;

        if (props) {
            this.name = props.name ? props.name : this.name;
            this.url = props.url ? props.url : this.url;
            this.isOutURL = (props.isOutURL!==undefined) ? props.isOutURL : this.isOutURL;
            this.isNewWindow = (props.isNewWindow!==undefined) ? props.isNewWindow : this.isNewWindow;
        }
    }

    Util.inherit(Link, Text);

    return Link;
});

/**
 * Created by careerBox on 2014-11-15.
 */



define('classes/Enums/ShapeType',[], function () {
    var ShapeType = {
        circle: 'circle',
        box: 'box'
    };

    return ShapeType;
});
/**
 * Created by careerBox on 2014-11-11.
 */



define('classes/LayoutComponents/Items/Shape',[
    'classes/Util',
    'classes/Enums/ShapeType',
    'classes/Enums/ItemType',
    'classes/LayoutComponents/Items/Item'
], function (Util, ShapeType, ItemType, Item) {

    function Shape(props) {
        Item.call(this, props);

        this.itemType = ItemType.shape;
        this.shapeType = ShapeType.box;

        if (props) {
            this.shapeType = props.shapeType ? props.shapeType : this.shapeType;
        }
    }

    Util.inherit(Shape, Item);

    return Shape;
});
/**
 * Created by careerBox on 2014-11-11.
 */



define('classes/LayoutComponents/Article',[
    'classes/Util',
    'classes/LayoutComponents/LayoutComponent',
    'classes/Enums/ItemType',
    'classes/Enums/LayoutComponentType',
    'classes/LayoutComponents/Items/Icon',
    'classes/LayoutComponents/Items/Image',
    'classes/LayoutComponents/Items/Line',
    'classes/LayoutComponents/Items/Link',
    'classes/LayoutComponents/Items/Shape',
    'classes/LayoutComponents/Items/Text'
], function (Util, LayoutComponent, ItemType, LayoutComponentType, Icon, Image, Line, Link, Shape, Text) {

    function createChildObj(article, data) {

        var childArr = [];

        for ( var i=0 ; i<data.length ; i++ ) {

            var tempArr = [];
            for ( var k=0 ; k<data[i].length ; k++ ) {

                switch (data[i][k].itemType) {
                    case ItemType.icon:
                        tempArr.push(new Icon(data[i][k]));
                        break;

                    case ItemType.image:
                        tempArr.push(new Image(data[i][k]));
                        break;

                    case ItemType.line:
                        tempArr.push(new Line(data[i][k]));
                        break;

                    case ItemType.link:
                        tempArr.push(new Link(data[i][k]));
                        break;

                    case ItemType.shape:
                        tempArr.push(new Shape(data[i][k]));
                        break;

                    case ItemType.text:
                        tempArr.push(new Text(data[i][k]));
                        break;
                }

            }
            childArr.push(tempArr);
        }

        article.childArr = childArr;
    }

    function Article(props) {
        LayoutComponent.call(this, props);

        this._template_id = null;
        this.childArr = [[]];
        this.rowCount = 1;
        this.colCount = 1;
        this.layoutComponentType = LayoutComponentType.article;
        this.bindingChanged = false;
        this.isBasic = null;

        if (props) {
            this._template_id = props._template_id ? props._template_id : this._template_id;
            this.rowCount = Number((props.rowCount!==undefined) ? props.rowCount : this.rowCount);
            this.colCount = Number((props.colCount!==undefined) ? props.colCount : this.colCount);
            this.bindingChanged = (props.bindingChanged!==undefined) ? props.bindingChanged : this.bindingChanged;
            this.isBasic = props.isBasic ? props.isBasic : this.isBasic;

            if (props.childArr) {
                createChildObj(this, props.childArr);
            }
        }
    }

    Util.inherit(Article, LayoutComponent);

    return Article;
});

/**
 * Created by careerBox on 2014-11-11.
 */



define('classes/Templates/Template',[
    'classes/LayoutComponents/Article',
], function (Article) {

    function Template(props) {
        this._id = null;
        this.title = 'New Template';
        this.target = new Article();
        this.description = '';
        this.timestamp = new Date();
        this.thumbnail = null;
        this.isBasic = false;

        // server only
        this._member_id = null;

        if (props) {
            this._id = props._id ? props._id : null;
            this.title = props.title ? props.title : this.title;
            this.description = props.description ? props.description : this.description;
            this.timestamp = props.timestamp ? props.timestamp : this.timestamp;
            this.thumbnail = props.thumbnail ? props.thumbnail : this.thumbnail;
            this.isBasic = (props.isBasic!==undefined) ? props.isBasic : this.isBasic;

            this._member_id = props._member_id ? props._member_id : this._member_id;

            if (props.target) {
                this.target = new Article(props.target);
            }
        }
    }

    return Template;
});
/**
 * Created by JEONGBORAM-PC-W1 on 2014-11-20.
 */
define('service/EditorData',['app', 'classes/Paper', 'classes/Portfolio', 'classes/Templates/Template'], function (app, Paper, Portfolio, Template) {

    var EditorData = {
        editorType: '',
        portfolio: new Portfolio(),
        paper: new Paper(),
        paperId: '',
        paperTitle: '',
        paperItemArray: [],
        paperList: [],
        template: new Template(),
        templateState: '',
        templateItemArray: [],
        childArr: [],
        start_zOrder: null,
        end_zOrder: null,
        infoType: '',
        bindingData: [],
        shareId: '',

        focusId: '',
        focusInput: false
    };

    app.factory('EditorData', function () {
        return EditorData;
    });

    return EditorData;
});


/**
 * Created by JEONGBORAM-PC-W1 on 2014-12-20.
 */
define('service/fileUpload',['app', 'service/serverURL'], function (app) {
    app.factory('fileUpload', ['serverURL', function (serverURL) {
        return function ($upload, files, isBinding, progressCallBack, successCallBack) {

            function onProgress(evt) {
                progressCallBack(evt);
            }

            function onSuccess(data) {
                successCallBack(data);
            }

            for (var i = 0; i < files.length; i++) {
                var file = files[i];
                $upload.upload({
                    url: serverURL + '/file',
                    method: 'POST',
                    withCredentials: true,
                    data: {isBinding: isBinding},
                    file: file
                }).progress(onProgress).success(onSuccess);
            }
        };
    }]);
});
/**
 * Created by careerBox on 2014-12-17.
 */



define('classes/Info/PersonalInfoItem',[], function () {

    var dictionary = {
        'I_picture' : '프로필',
        'S_name_kr' : '한글이름',
        'S_name_en' : '영문이름',
        'S_name_ch' : '한문이름',
        'D_birthday' : '생일',
        'S_email' : '이메일',
        'S_phone' : '전화번호',
        'S_cellphone' : '핸드폰',
        'S_address_1' : '주소',
        'S_address_2' : '상세주소'
    };

    function PersonalInfoItem(props) {

        this._id = null;
        this.I_picture = null;
        this.S_name_kr = '';
        this.S_name_en = '';
        this.S_name_ch = '';
        this.D_birthday = new Date();
        this.S_email = '';
        this.S_phone = '';
        this.S_cellphone = '';
        this.S_address_1 = '';
        this.S_address_2 = '';

        if ( props ) {
            this._id = props._id ? props._id : this._id;
            this.I_picture = props.I_picture ? props.I_picture : this.I_picture;
            this.S_name_kr = props.S_name_kr ? props.S_name_kr : this.S_name_kr;
            this.S_name_en = props.S_name_en ? props.S_name_en : this.S_name_en;
            this.S_name_ch = props.S_name_ch ? props.S_name_ch : this.S_name_ch;
            this.D_birthday = props.D_birthday ? props.D_birthday : this.D_birthday;
            this.S_email = props.S_email ? props.S_email : this.S_email;
            this.S_phone = props.S_phone ? props.S_phone : this.S_phone;
            this.S_cellphone = props.S_cellphone ? props.S_cellphone : this.S_cellphone;
            this.S_address_1 = props.S_address_1 ? props.S_address_1 : this.S_address_1;
            this.S_address_2 = props.S_address_2 ? props.S_address_2 : this.S_address_2;
        }
    }

    PersonalInfoItem.prototype.getAttributeName = function getAttributeName(key) {
        return dictionary[key];
    };

    return PersonalInfoItem;
});
/**
 * Created by careerBox on 2014-12-16.
 */



define('classes/Structs/Term',[], function () {

    function Term(props) {
        this.start = new Date();
        this.end = new Date();

        if (props) {
            this.start = new Date(props.start ? props.start : this.start);
            this.end = new Date(props.end ? props.end : this.end);
        }
    }

    return Term;
});
/**
 * Created by careerBox on 2014-12-17.
 */




define('classes/Info/AdditionalInfoItem',['classes/Structs/Term'], function (Term) {

    var dictionary = {
        'B_veteran'                    : "보훈대상",
        'B_disability'                 : "장애여부",
        'T_militaryService_term'       : "복무기간",
        'S_militaryService_category'   : "병역사항",
        'S_religion'                   : "종교",
        'N_physical_tall'              : "신장",
        'N_physical_weight'            : "몸무게",
        'S_physical_blood'             : "혈액형",
        'N_physical_sight_left'        : "우시",
        'N_physical_sight_right'       : "좌시",
        'S_favorite'                   : "취미",
        'S_skill'                      : "특기",
        'S_respect'                    : "존경인물"
    };

    function AdditionalInfoItem(props) {

        this._id = null;
        this.B_veteran = false;
        this.B_disability = false;
        this.T_militaryService_term = new Term();
        this.S_militaryService_category = '';
        this.S_religion = '';
        this.N_physical_tall = 0;
        this.N_physical_weight = 0;
        this.S_physical_blood = 0;
        this.N_physical_sight_left = 0;
        this.N_physical_sight_right = 0;
        this.S_favorite = '';
        this.S_skill = '';
        this.S_respect = '';

        if ( props ) {
            this._id = props._id ? props._id : this._id;
            this.B_veteran = (props.B_veteran!==undefined) ? props.B_veteran : this.B_veteran;
            this.B_disability = (props.B_disability!==undefined) ? props.B_disability : this.B_disability;
            this.T_militaryService_term = props.T_militaryService_term ? props.T_militaryService_term : this.T_militaryService_term;
            this.S_militaryService_category = props.S_militaryService_category ? props.S_militaryService_category : this.S_militaryService_category;
            this.S_religion = props.S_religion ? props.S_religion : this.S_religion;
            this.N_physical_tall = (props.N_physical_tall!==undefined) ? props.N_physical_tall : this.N_physical_tall;
            this.N_physical_weight = (props.N_physical_weight!==undefined) ? props.N_physical_weight : this.N_physical_weight;
            this.S_physical_blood = (props.S_physical_blood!==undefined) ? props.S_physical_blood : this.S_physical_blood;
            this.N_physical_sight_left = (props.N_physical_sight_left!==undefined) ? props.N_physical_sight_left : this.N_physical_sight_left;
            this.N_physical_sight_right = (props.N_physical_sight_right!==undefined) ? props.N_physical_sight_right : this.N_physical_sight_right;
            this.S_favorite = props.S_favorite ? props.S_favorite : this.S_favorite;
            this.S_skill = props.S_skill ? props.S_skill : this.S_skill;
            this.S_respect = props.S_respect ? props.S_respect : this.S_respect;
        }
    }

    AdditionalInfoItem.prototype.getAttributeName = function getAttributeName(key){
        return dictionary[key];
    };

    return AdditionalInfoItem;
});
/**
 * Created by careerBox on 2014-12-16.
 */




define('classes/Info/HighSchoolInfoItem',[
    'classes/Structs/Term'
], function (Term) {

    var dictionary = {
        'S_name' : '학교명',              // 학교명
        'B_qualification' : '검정고시 여부', // 검정고시 여부
        'B_graduate' : '졸업 여부',      // 졸업 여부
        'T_term' : '재학기간',
        'S_major' : '전공'             // 전공
    };

    function HighSchoolInfoItem(props) {

        this._id = null;
        this.S_name = '';              // 학교명
        this.B_qualification = false; // 검정고시 여부
        this.B_graduate = false;      // 졸업 여부
        this.T_term = new Term();
        this.S_major = '';             // 전공

        if ( props ) {
            this._id = props._id ? props._id : this._id;
            this.S_name = props.S_name ? props.S_name : this.S_name;
            this.B_qualification = (props.B_qualification!==undefined) ? props.B_qualification : this.B_qualification;
            this.B_graduate = (props.B_graduate!==undefined) ? props.B_graduate : this.B_graduate;
            this.T_term = props.T_term ? props.T_term : this.T_term;
            this.S_major = props.S_major ? props.S_major : this.S_major;
        }
    }

    HighSchoolInfoItem.prototype.getAttributeName = function getAttributeName(key){
        return dictionary[key];
    };

    return HighSchoolInfoItem;
});
/**
 * Created by careerBox on 2014-12-17.
 */



define('classes/Info/UnivSchoolInfoItem',[
    'classes/Structs/Term'
], function (Term) {

    var dictionary = {
        'S_name' : '학교명',            // 학교명
        'S_address' : '소재지',         // 소재지
        'B_graduate' : '졸업 여부',     // 졸업 여부
        'T_term' : '재학기간',
        'S_major' : '전공'             // 전공
    };

    function UnivSchoolInfoItem(props) {

        this._id = null;
        this.S_name = '';              // 학교명
        this.S_address = '';           // 소재지
        this.B_graduate = false;      // 졸업 여부
        this.T_term = new Term();
        this.S_major = '';             // 전공

        if ( props ) {
            this._id = props._id ? props._id : this._id;
            this.S_name = props.S_name ? props.S_name : this.S_name;
            this.S_address = props.S_address ? props.S_address : this.S_address;
            this.B_graduate = (props.B_graduate!==undefined) ? props.B_graduate : this.B_graduate;
            this.T_term = props.T_term ? props.T_term : this.T_term;
            this.S_major = props.S_major ? props.S_major : this.S_major;
        }
    }

    UnivSchoolInfoItem.prototype.getAttributeName = function getAttributeName(key){
        return dictionary[key];
    };

    return UnivSchoolInfoItem;
});
/**
 * Created by careerBox on 2014-12-17.
 */




define('classes/Info/WorkingInfoItem',[
    'classes/Structs/Term'
], function (Term) {

    var dictionary = {
        'I_logo': '대표이미지',
        'S_name': '회사명',
        'S_address': '소재지',
        'S_hireType': '고용형태',
        'B_resignation': '퇴직여부',
        'T_term': '기간',
        'S_department': '부서',
        'S_position': '직위',
        'S_jobTitle': '직책',
        'S_jobType': '직종',
        'S_business': '주요업무',
        'S_achive': '주요성과'
    };

    function WorkingInfoItem(props) {

        this._id = null;
        this.I_logo = '';           // 대표이미지
        this.S_name = '';           // 회사명
        this.S_address = '';        // 소재지
        this.S_hireType = '';       // 고용 형태
        this.B_resignation = true; // 퇴직여부
        this.T_term = new Term();
        this.S_department = '';     // 부서
        this.S_position = '';       // 직위
        this.S_jobTitle = '';       // 직책
        this.S_jobType = '';        // 직종
        this.S_business = '';       // 주요 업무
        this.S_achive = '';         // 주요 성과

        if ( props ) {
            this._id = props._id ? props._id : this._id;
            this.I_logo = props.I_logo ? props.I_logo : this.I_logo;
            this.S_name = props.S_name ? props.S_name : this.S_name;
            this.S_address = props.S_address ? props.S_address : this.S_address;
            this.S_hireType = props.S_hireType ? props.S_hireType : this.S_hireType;
            this.B_resignation = (props.B_resignation!==undefined) ? props.B_resignation : this.B_resignation;
            this.T_term = props.T_term ? props.T_term : this.T_term;
            this.S_department = props.S_department ? props.S_department : this.S_department;
            this.S_position = props.S_position ? props.S_position : this.S_position;
            this.S_jobTitle = props.S_jobTitle ? props.S_jobTitle : this.S_jobTitle;
            this.S_jobType = props.S_jobType ? props.S_jobType : this.S_jobType;
            this.S_business = props.S_business ? props.S_business : this.S_business;
            this.S_achive = props.S_achive ? props.S_achive : this.S_achive;
        }
    }

    WorkingInfoItem.prototype.getAttributeName = function getAttributeName(key){
        return dictionary[key];
    };

    return WorkingInfoItem;
});
/**
 * Created by careerBox on 2014-12-17.
 */



define('classes/Info/CertificationAbilityInfoItem',[], function () {
    var dictionary = {
        'S_name': '자격증명',
        'S_publisher': '발행처',
        'D_date': '취급일자',
        'I_image': '대표이미지',
        'F_file': '첨부파일'
    };

    function CertificateAbilityInfoItem(props) {

        this._id = null;
        this.S_name = '';
        this.S_publisher = '';         // 발행처
        this.D_date = new Date();
        this.I_image = '';
        this.F_file = '';

        if (props) {
            this._id = props._id ? props._id : this._id;
            this.S_name = props.S_name ? props.S_name : this.S_name;
            this.S_publisher = props.S_publisher ? props.S_publisher : this.S_publisher;
            this.D_date = props.D_date ? props.D_date : this.D_date;
            this.I_image = props.I_image ? props.I_image : this.I_image;
            this.F_file = props.F_file ? props.F_file : this.F_file;
        }
    }

    CertificateAbilityInfoItem.prototype.getAttributeName = function getAttributeName(key) {
        return dictionary[key];
    };

    return CertificateAbilityInfoItem;
});
/**
 * Created by careerBox on 2014-12-17.
 */



define('classes/Info/ProficiencyInfoItem',[], function () {

    var dictionary = {
        'S_name': '언어명',
        'B_exam': '공인시험',
        'S_reg_number': '등록번호',
        'D_date': '취득일자',
        'S_grade': '등급',
        'S_proficiency': '활용수준',
        'F_file': '첨부파일'
    };

    function ProficiencyInfoItem(props) {

        this._id = null;
        this.S_name = '';              // 언어명
        this.B_exam = false;          // 공인 시험
        this.S_reg_number = '';        // 등록번호
        this.D_date = new Date();     // 취득일자
        this.S_grade = '';             // 등급
        this.S_proficiency = '';       // 활용수준
        this.F_file = '';              // 첨부파일

        if (props) {
            this._id = props._id ? props._id : this._id;
            this.S_name = props.S_name ? props.S_name : this.S_name;
            this.B_exam = (props.B_exam!==undefined) ? props.B_exam : this.B_exam;
            this.S_reg_number = props.S_reg_number ? props.S_reg_number : this.S_reg_number;
            this.D_date = props.D_date ? props.D_date : this.D_date;
            this.S_grade = props.S_grade ? props.S_grade : this.S_grade;
            this.S_proficiency = props.S_proficiency ? props.S_proficiency : this.S_proficiency;
            this.F_file = props.F_file ? props.F_file : this.F_file;
        }
    }

    ProficiencyInfoItem.prototype.getAttributeName = function getAttributeName(key) {
        return dictionary[key];
    };

    return ProficiencyInfoItem;
});
/**
 * Created by careerBox on 2014-12-17.
 */



define('classes/Info/ComputerAbilityInfoItem',[], function () {

    var dictionary = {
        'S_name' : '기능',
        'S_grade' : '활용수준',
        'N_term' : '활용기간'
    };

    function ComputerAbilityInfoItem(props) {

        this._id = null;
        this.S_name = '';              // 기능
        this.S_grade = '';             // 활용 수준
        this.N_term = 0;     // 활용 기간

        if ( props ) {
            this._id = props._id ? props._id : this._id;
            this.S_name = props.S_name ? props.S_name : this.S_name;
            this.S_grade = props.S_grade ? props.S_grade : this.S_grade;
            this.N_term = (props.N_term!==undefined) ? props.N_term : this.N_term;
        }
    }

    ComputerAbilityInfoItem.prototype.getAttributeName = function getAttributeName(key){
        return dictionary[key];
    };

    return ComputerAbilityInfoItem;
});
/**
 * Created by careerBox on 2014-12-17.
 */



define('classes/Info/PaperAbilityInfoItem',[
    'classes/Structs/Term'
], function () {

    var dictionary = {
        'S_title'   : '논문 제목',
        'S_academy' : '논문게재 학회',
        'D_date'    : '논문게재 날짜',
        'S_ratio'   : '참여 정도',
        'S_detail'  : '논문 내용'
    };

    function PaperAbilityInfoItem(props) {

        this._id = null;
        this.S_title = ''; // 논문 제목
        this.S_academy = ''; // 논문게재 학회
        this.D_date = new Date(); // 논문게재 날짜
        this.S_ratio = ''; // 참여 정도
        this.S_detail = ''; // 논문 내용

        if ( props ) {
            this._id = props._id ? props._id : this._id;
            this.S_title = props.S_title ? props.S_title : this.S_title;
            this.S_academy = props.S_academy ? props.S_academy : this.S_academy;
            this.D_date = props.D_date ? props.D_date : this.D_date;
            this.S_ratio = props.S_ratio ? props.S_ratio : this.S_ratio;
            this.S_detail = props.S_detail ? props.S_detail : this.S_detail;
        }
    }

    PaperAbilityInfoItem.prototype.getAttributeName = function getAttributeName(key){
        return dictionary[key];
    };

    return PaperAbilityInfoItem;
});
/**
 * Created by careerBox on 2014-12-17.
 */




define('classes/Info/ScholarshipInfoItem',[], function () {

    var dictionary = {
        'S_name' : '장학금명',
        'S_school' : '기관명',
        'N_year' : '수여년도',
        'N_term' : '수여학기'
    };

    function ScholarshipInfoItem(props) {

        this._id = null;
        this.S_name = ''; // 장학금명
        this.S_school = ''; // 학교명
        this.N_year = 0; // 수여 년도
        this.N_term = 0; // 수여 학기

        if ( props ) {
            this._id = props._id ? props._id : this._id;
            this.S_name = props.S_name ? props.S_name : this.S_name;
            this.S_school = props.S_school ? props.S_school : this.S_school;
            this.N_year = (props.N_year!==undefined) ? props.N_year : this.N_year;
            this.N_term = (props.N_term!==undefined) ? props.N_term : this.N_term;
        }
    }

    ScholarshipInfoItem.prototype.getAttributeName = function getAttributeName(key){
        return dictionary[key];
    };

    return ScholarshipInfoItem;
});
/**
 * Created by careerBox on 2014-12-17.
 */




define('classes/Info/AwardInfoItem',[], function () {

    var dictionary = {
        'S_name'   : '대회명',
        'S_title' : '작품명',
        'S_host'    : '주최기관',
        'D_date'   : '수상일자',
        'S_detail'  : '상세정보'
    };

    function AwardInfoItem(props) {

        this._id = null;
        this.S_name = ''; // 대회명
        this.S_title = ''; // 작품명
        this.S_host = ''; // 주최기관
        this.D_date = new Date(); // 수상일자
        this.S_detail = ''; // 상세정보

        if ( props ) {
            this._id = props._id ? props._id : this._id;
            this.S_name = props.S_name ? props.S_name : this.S_name;
            this.S_title = props.S_title ? props.S_title : this.S_title;
            this.S_host = props.S_host ? props.S_host : this.S_host;
            this.D_date = props.D_date ? props.D_date : this.D_date;
            this.S_detail = props.S_detail ? props.S_detail : this.S_detail;
        }
    }

    AwardInfoItem.prototype.getAttributeName = function getAttributeName(key){
        return dictionary[key];
    };

    return AwardInfoItem;
});
/**
 * Created by careerBox on 2014-12-17.
 */




define('classes/Info/LocalActivityInfoItem',[
    'classes/Structs/Term'
], function (Term) {

    var dictionary = {
        'S_category'   : '분류',
        'S_name' : '활동명',
        'T_term'    : '활동 기간',
        'S_description'   : '활동 내용',
        'I_image'  : '대표이미지',
        'F_file'  : '첨부파일'
    };

    function LocalActivityInfoItem(props) {

        this._id = null;
        this.S_category = ''; // 분류
        this.S_name = ''; // 활동명
        this.T_term = new Term(); // 활동 기간
        this.S_description = ''; // 활동 내용
        this.I_image = ''; // 대표이미지
        this.F_file = ''; // 첨부파일

        if ( props ) {
            this._id = props._id ? props._id : this._id;
            this.S_category = props.S_category ? props.S_category : this.S_category;
            this.S_name = props.S_name ? props.S_name : this.S_name;
            this.T_term = props.T_term ? props.T_term : this.T_term;
            this.S_description = props.S_description ? props.S_description : this.S_description;
            this.I_image = props.I_image ? props.I_image : this.I_image;
            this.F_file = props.F_file ? props.F_file : this.F_file;
        }
    }

    LocalActivityInfoItem.prototype.getAttributeName = function getAttributeName(key){
        return dictionary[key];
    };

    return LocalActivityInfoItem;
});
/**
 * Created by careerBox on 2014-12-17.
 */




define('classes/Info/GlobalActivityInfoItem',[
    'classes/Structs/Term'
], function (Term) {

    var dictionary = {
        'S_country'   : '활동 국가',
        'T_term'    : '활동 기간',
        'S_description'   : '활동 내용',
        'I_image'  : '대표이미지',
        'F_file'  : '첨부파일'
    };

    function GlobalActivityInfoItem(props) {

        this._id = null;
        this.S_country = ''; // 활동 국가
        this.T_term = new Term(); // 활동 기간
        this.S_description = ''; // 활동 내용
        this.I_image = ''; // 대표이미지
        this.F_file = ''; // 첨부파일

        if ( props ) {
            this._id = props._id ? props._id : this._id;
            this.S_country = props.S_country ? props.S_country : this.S_country;
            this.T_term = props.T_term ? props.T_term : this.T_term;
            this.S_description = props.S_description ? props.S_description : this.S_description;
            this.I_image = props.I_image ? props.I_image : this.I_image;
            this.F_file = props.F_file ? props.F_file : this.F_file;
        }
    }

    GlobalActivityInfoItem.prototype.getAttributeName = function getAttributeName(key){
        return dictionary[key];
    };

    return GlobalActivityInfoItem;
});
/**
 * Created by careerBox on 2014-12-17.
 */




define('classes/Info/ProjectInfoItem',[
    'classes/Structs/Term'
], function (Term) {

    var dictionary = {
        'S_title': '프로젝트명',
        'S_part': '담당부분',
        'T_term': '기간',
        'S_description': '설명',
        'I_image': '이미지',
        'F_file': '첨부파일'
    };

    function ProjectInfoItem(props) {

        this._id = null;
        this.S_title = ''; // 프로젝트명
        this.S_part = ''; // 담당 부분
        this.T_term = new Term(); // 기간
        this.S_description = ''; // 설명
        this.I_image = ''; // 이미지
        this.F_file = ''; // 첨부파일

        if (props) {
            this._id = props._id ? props._id : this._id;
            this.S_title = props.S_title ? props.S_title : this.S_title;
            this.S_part = props.S_part ? props.S_part : this.S_part;
            this.T_term = props.T_term ? props.T_term : this.T_term;
            this.S_description = props.S_description ? props.S_description : this.S_description;
            this.I_image = props.I_image ? props.I_image : this.I_image;
            this.F_file = props.F_file ? props.F_file : this.F_file;
        }
    }

    ProjectInfoItem.prototype.getAttributeName = function getAttributeName(key) {
        return dictionary[key];
    };

    return ProjectInfoItem;
});
/**
 * Created by careerBox on 2014-12-17.
 */




define('classes/Info/ColumnInfoItem',[], function () {
    var dictionary = {
        'S_title' : '칼럼명',
        'S_content' : '내용'
    };

    function ColumnInfoItem(props) {

        this._id = null;
        this.S_title = ''; // 칼럼명
        this.S_content = ''; // 내용

        if ( props ) {
            this._id = props._id ? props._id : this._id;
            this.S_title = props.S_title ? props.S_title : this.S_title;
            this.S_content = props.S_content ? props.S_content : this.S_content;
        }
    }

    ColumnInfoItem.prototype.getAttributeName = function getAttributeName(key){
        return dictionary[key];
    };

    return ColumnInfoItem;
});
/**
 * Created by KHW on 2014-12-17.
 */
define('service/getAttributeNames',[
    'app',
    'classes/Enums/InfoType',
    'classes/Info/PersonalInfoItem', // 개인정보
    'classes/Info/AdditionalInfoItem', // 추가정보
    'classes/Info/HighSchoolInfoItem', // 고등학교
    'classes/Info/UnivSchoolInfoItem', // 대학교
    'classes/Info/WorkingInfoItem', // 경력
    'classes/Info/CertificationAbilityInfoItem', // 자격증
    'classes/Info/ProficiencyInfoItem', // 외국어
    'classes/Info/ComputerAbilityInfoItem', // 컴퓨터 활용 능력
    'classes/Info/PaperAbilityInfoItem', // 논문
    'classes/Info/ScholarshipInfoItem', // 장학금
    'classes/Info/AwardInfoItem', // 수상내역
    'classes/Info/LocalActivityInfoItem', // 국내활동
    'classes/Info/GlobalActivityInfoItem', // 국외활동
    'classes/Info/ProjectInfoItem', // 프로젝트
    'classes/Info/ColumnInfoItem'  // 칼럼
], function (app, InfoType, PersonalInfoItem, AdditionalInfoItem, HighSchoolInfoItem, UnivSchoolInfoItem, WorkingInfoItem, CertificationAbilityInfoItem, ProficiencyInfoItem, ComputerAbilityInfoItem,
             PaperAbilityInfoItem, ScholarshipInfoItem, AwardInfoItem, LocalActivityInfoItem, GlobalActivityInfoItem, ProjectInfoItem, ColumnInfoItem) {
    app.factory('getAttributeNames', function () {
        return function (category) {
            var result = {};
            var item = getItem(category);

            for(var key in item){
                var AttributeName = item.getAttributeName(key);
                if(AttributeName && AttributeName !== '0' && AttributeName !== 0) {
                    result[key] = AttributeName;
                }
            }

            return result;
        };

        function getItem(category){
            switch (category){
                case InfoType.personalInfo:
                    return new PersonalInfoItem();
                case InfoType.additionalInfo:
                    return new AdditionalInfoItem();
                case InfoType.highSchoolInfo:
                    return new HighSchoolInfoItem();
                case InfoType.univSchoolInfo:
                    return new UnivSchoolInfoItem();
                case InfoType.workingInfo:
                    return new WorkingInfoItem();
                case InfoType.certificationAbilityInfo:
                    return new CertificationAbilityInfoItem();
                case InfoType.proficiencyInfo:
                    return new ProficiencyInfoItem();
                case InfoType.computerAbilityInfo:
                    return new ComputerAbilityInfoItem();
                case InfoType.paperAbilityInfo:
                    return new PaperAbilityInfoItem();
                case InfoType.scholarshipInfo:
                    return new ScholarshipInfoItem();
                case InfoType.awardInfo:
                    return new AwardInfoItem();
                case InfoType.localActivityInfo:
                    return new LocalActivityInfoItem();
                case InfoType.globalActivityInfo:
                    return new GlobalActivityInfoItem();
                case InfoType.projectInfo:
                    return new ProjectInfoItem();
                case InfoType.columnInfo:
                    return new ColumnInfoItem();
            }
        }
    });
});

/**
 * Created by KHW on 2014-12-17.
 */
define('service/getAvailableAttribute',[
    'app',
    'classes/Enums/InfoType',
    'classes/Info/PersonalInfoItem', // 개인정보
    'classes/Info/AdditionalInfoItem', // 추가정보
    'classes/Info/HighSchoolInfoItem', // 고등학교
    'classes/Info/UnivSchoolInfoItem', // 대학교
    'classes/Info/WorkingInfoItem', // 경력
    'classes/Info/CertificationAbilityInfoItem', // 자격증
    'classes/Info/ProficiencyInfoItem', // 외국어
    'classes/Info/ComputerAbilityInfoItem', // 컴퓨터 활용 능력
    'classes/Info/PaperAbilityInfoItem', // 논문
    'classes/Info/ScholarshipInfoItem', // 장학금
    'classes/Info/AwardInfoItem', // 수상내역
    'classes/Info/LocalActivityInfoItem', // 국내활동
    'classes/Info/GlobalActivityInfoItem', // 국외활동
    'classes/Info/ProjectInfoItem', // 프로젝트
    'classes/Info/ColumnInfoItem'  // 칼럼
], function (app, InfoType, PersonalInfoItem, AdditionalInfoItem, HighSchoolInfoItem, UnivSchoolInfoItem, WorkingInfoItem, CertificationAbilityInfoItem, ProficiencyInfoItem, ComputerAbilityInfoItem,
             PaperAbilityInfoItem, ScholarshipInfoItem, AwardInfoItem, LocalActivityInfoItem, GlobalActivityInfoItem, ProjectInfoItem, ColumnInfoItem) {
    app.factory('getAvailableAttribute', function () {
        return function (category, infoType) {

            var result = {};
            var item = getItem(category);
            var key;
            var AttributeName;

            // I F 빼고 가져오기
            if (infoType === '-I -F') {
                for (key in item) {
                    if (key.split('_')[0] !== 'I' && key.split('_')[0] !== 'F') {
                        AttributeName = item.getAttributeName(key);
                        if (AttributeName && AttributeName !== '0' && AttributeName !== 0) {
                            result[key] = AttributeName;
                        }
                    }
                }
                return result;
            }

            for (key in item) {
                if (key.split('_')[0] === infoType) {
                    AttributeName = item.getAttributeName(key);
                    if (AttributeName && AttributeName !== '0' && AttributeName !== 0) {
                        result[key] = AttributeName;
                    }
                }
            }

            return result;
        };

        function getItem(category) {
            switch (category) {
                case InfoType.personalInfo:
                    return new PersonalInfoItem();
                case InfoType.additionalInfo:
                    return new AdditionalInfoItem();
                case InfoType.highSchoolInfo:
                    return new HighSchoolInfoItem();
                case InfoType.univSchoolInfo:
                    return new UnivSchoolInfoItem();
                case InfoType.workingInfo:
                    return new WorkingInfoItem();
                case InfoType.certificationAbilityInfo:
                    return new CertificationAbilityInfoItem();
                case InfoType.proficiencyInfo:
                    return new ProficiencyInfoItem();
                case InfoType.computerAbilityInfo:
                    return new ComputerAbilityInfoItem();
                case InfoType.paperAbilityInfo:
                    return new PaperAbilityInfoItem();
                case InfoType.scholarshipInfo:
                    return new ScholarshipInfoItem();
                case InfoType.awardInfo:
                    return new AwardInfoItem();
                case InfoType.localActivityInfo:
                    return new LocalActivityInfoItem();
                case InfoType.globalActivityInfo:
                    return new GlobalActivityInfoItem();
                case InfoType.projectInfo:
                    return new ProjectInfoItem();
                case InfoType.columnInfo:
                    return new ColumnInfoItem();
            }
        }
    });
});

/**
 * Created by careerBox on 2014-12-15.
 */



define('classes/Info/PersonalInfo',[
    'classes/Util',
    'classes/Info/InfoClass',
    'classes/Info/PersonalInfoItem',
    'classes/Enums/InfoType'
], function (Util, InfoClass, PersonalInfoItem, InfoType) {

    function PersonalInfo(props) {

        InfoClass.call(this, props);

        this.title = '기본정보';
        this.infoType = InfoType.personalInfo;
        this.items = [new PersonalInfoItem()];

        if ( props && props.items ) {
            var newItems = [];
            for ( var i=0 ; i<props.items.length ; i++ ) {
                newItems.push(new PersonalInfoItem(props.items[i]));
            }

            this.items = newItems;
        }
    }

    Util.inherit(PersonalInfo, InfoClass);

    return PersonalInfo;
});
/**
 * Created by careerBox on 2014-12-16.
 */



define('classes/Info/AdditionalInfo',[
    'classes/Util',
    'classes/Info/InfoClass',
    'classes/Info/AdditionalInfoItem',
    'classes/Enums/InfoType',
], function (Util, InfoClass, AdditionalInfoItem, InfoType) {

    function AdditionalInfo(props) {

        InfoClass.call(this, props);

        this.title = '추가정보';
        this.infoType = InfoType.additionalInfo;
        this.items = [new AdditionalInfoItem()];

        if ( props && props.items ) {
            var newItems = [];
            for ( var i=0 ; i<props.items.length ; i++ ) {
                newItems.push(new AdditionalInfoItem(props.items[i]));
            }

            this.items = newItems;
        }
    }

    Util.inherit(AdditionalInfo, InfoClass);

    return AdditionalInfo;
});
/**
 * Created by careerBox on 2014-12-16.
 */




define('classes/Info/HighSchoolInfo',[
    'classes/Util',
    'classes/Info/InfoClass',
    'classes/Info/HighSchoolInfoItem',
    'classes/Enums/InfoType'
], function (Util, InfoClass, HighSchoolInfoItem, InfoType) {

    function HighSchoolInfo(props) {

        InfoClass.call(this, props);

        this.title = '고등학교';
        this.infoType = InfoType.highSchoolInfo;
        this.items = [];

        if ( props && props.items ) {
            var newItems = [];
            for ( var i=0 ; i<props.items.length ; i++ ) {
                newItems.push(new HighSchoolInfoItem(props.items[i]));
            }

            this.items = newItems;
        }
    }

    Util.inherit(HighSchoolInfo, InfoClass);

    return HighSchoolInfo;
});
/**
 * Created by careerBox on 2014-12-16.
 */




define('classes/Info/UnivSchoolInfo',[
    'classes/Util',
    'classes/Info/InfoClass',
    'classes/Info/UnivSchoolInfoItem',
    'classes/Enums/InfoType'
], function (Util, InfoClass, UnivSchoolInfoItem, InfoType) {

    function UnivSchoolInfo(props) {

        InfoClass.call(this, props);

        this.title = '대학교';
        this.infoType = InfoType.univSchoolInfo;
        this.items = [];

        if ( props && props.items ) {
            var newItems = [];
            for ( var i=0 ; i<props.items.length ; i++ ) {
                newItems.push(new UnivSchoolInfoItem(props.items[i]));
            }

            this.items = newItems;
        }
    }

    Util.inherit(UnivSchoolInfo, InfoClass);

    return UnivSchoolInfo;
});
/**
 * Created by careerBox on 2014-12-16.
 */



define('classes/Info/WorkingInfo',[
    'classes/Util',
    'classes/Info/InfoClass',
    'classes/Info/WorkingInfoItem',
    'classes/Enums/InfoType'
], function (Util, InfoClass, WorkingInfoItem, InfoType) {

    function WorkingInfo(props) {

        InfoClass.call(this, props);

        this.title = '경력';
        this.infoType = InfoType.workingInfo;
        this.items = [];

        if ( props && props.items ) {
            var newItems = [];
            for ( var i=0 ; i<props.items.length ; i++ ) {
                newItems.push(new WorkingInfoItem(props.items[i]));
            }

            this.items = newItems;
        }
    }

    Util.inherit(WorkingInfo, InfoClass);

    return WorkingInfo;
});
/**
 * Created by careerBox on 2014-12-16.
 */



define('classes/Info/CertificationAbilityInfo',[
    'classes/Util',
    'classes/Info/InfoClass',
    'classes/Info/CertificationAbilityInfoItem',
    'classes/Enums/InfoType'
], function (Util, InfoClass, CertificationAbilityInfoItem, InfoType) {

    function CertificateAbilityInfo(props) {

        InfoClass.call(this, props);

        this.title = '자격증';
        this.infoType = InfoType.certificationAbilityInfo;
        this.items = [];

        if ( props && props.items ) {
            var newItems = [];
            for ( var i=0 ; i<props.items.length ; i++ ) {
                newItems.push(new CertificationAbilityInfoItem(props.items[i]));
            }

            this.items = newItems;
        }
    }

    Util.inherit(CertificateAbilityInfo, InfoClass);

    return CertificateAbilityInfo;
});
/**
 * Created by careerBox on 2014-12-17.
 */



define('classes/Info/ProficiencyInfo',[
    'classes/Util',
    'classes/Info/InfoClass',
    'classes/Info/ProficiencyInfoItem',
    'classes/Enums/InfoType'
], function (Util, InfoClass, ProficiencyInfoItem, InfoType) {

    function ProficiencyInfo(props) {

        InfoClass.call(this, props);

        this.title = '외국어능력';
        this.infoType = InfoType.proficiencyInfo;
        this.items = [];

        if ( props && props.items ) {
            var newItems = [];
            for ( var i=0 ; i<props.items.length ; i++ ) {
                newItems.push(new ProficiencyInfoItem(props.items[i]));
            }

            this.items = newItems;
        }
    }

    Util.inherit(ProficiencyInfo, InfoClass);

    return ProficiencyInfo;
});
/**
 * Created by careerBox on 2014-12-16.
 */



define('classes/Info/ComputerAbilityInfo',[
    'classes/Util',
    'classes/Info/InfoClass',
    'classes/Info/ComputerAbilityInfoItem',
    'classes/Enums/InfoType'
], function (Util, InfoClass, ComputerAbilityInfoItem, InfoType) {

    function ComputerAbilityInfo(props) {

        InfoClass.call(this, props);

        this.title = '컴퓨터활용능력';
        this.infoType = InfoType.computerAbilityInfo;
        this.items = [];

        if ( props && props.items ) {
            var newItems = [];
            for ( var i=0 ; i<props.items.length ; i++ ) {
                newItems.push(new ComputerAbilityInfoItem(props.items[i]));
            }

            this.items = newItems;
        }
    }

    Util.inherit(ComputerAbilityInfo, InfoClass);

    return ComputerAbilityInfo;
});
/**
 * Created by careerBox on 2014-12-16.
 */



define('classes/Info/PaperAbilityInfo',[
    'classes/Util',
    'classes/Info/InfoClass',
    'classes/Info/PaperAbilityInfoItem',
    'classes/Enums/InfoType'
], function (Util, InfoClass, PaperAbilityInfoItem, InfoType) {

    function PaperAbilityInfo(props) {

        InfoClass.call(this, props);

        this.title = '논문';
        this.infoType = InfoType.paperAbilityInfo;
        this.items = [];

        if ( props && props.items ) {
            var newItems = [];
            for ( var i=0 ; i<props.items.length ; i++ ) {
                newItems.push(new PaperAbilityInfoItem(props.items[i]));
            }

            this.items = newItems;
        }
    }

    Util.inherit(PaperAbilityInfo, InfoClass);

    return PaperAbilityInfo;
});
/**
 * Created by careerBox on 2014-12-16.
 */



define('classes/Info/ScholarshipInfo',[
    'classes/Util',
    'classes/Info/InfoClass',
    'classes/Info/ScholarshipInfoItem',
    'classes/Enums/InfoType'
], function (Util, InfoClass, ScholarshipInfoItem, InfoType) {

    function ScholarshipInfo(props) {

        InfoClass.call(this, props);

        this.title = '장학금';
        this.infoType = InfoType.scholarshipInfo;
        this.items = [];

        if ( props && props.items ) {
            var newItems = [];
            for ( var i=0 ; i<props.items.length ; i++ ) {
                newItems.push(new ScholarshipInfoItem(props.items[i]));
            }

            this.items = newItems;
        }
    }

    Util.inherit(ScholarshipInfo, InfoClass);

    return ScholarshipInfo;
});
/**
 * Created by careerBox on 2014-12-16.
 */



define('classes/Info/AwardInfo',[
    'classes/Util',
    'classes/Info/InfoClass',
    'classes/Info/AwardInfoItem',
    'classes/Enums/InfoType'
], function (Util, InfoClass, AwardInfoItem, InfoType) {

    function AwardInfo(props) {

        InfoClass.call(this, props);

        this.title = '대회수상';
        this.infoType = InfoType.awardInfo;
        this.items = [];

        if ( props && props.items ) {
            var newItems = [];
            for ( var i=0 ; i<props.items.length ; i++ ) {
                newItems.push(new AwardInfoItem(props.items[i]));
            }

            this.items = newItems;
        }
    }

    Util.inherit(AwardInfo, InfoClass);

    return AwardInfo;
});
/**
 * Created by careerBox on 2014-12-16.
 */



define('classes/Info/LocalActivityInfo',[
    'classes/Util',
    'classes/Info/InfoClass',
    'classes/Info/LocalActivityInfoItem',
    'classes/Enums/InfoType'
], function (Util, InfoClass, LocalActivityInfoItem, InfoType) {

    function LocalActivityInfo(props) {

        InfoClass.call(this, props);

        this.title = '국내활동';
        this.infoType = InfoType.localActivityInfo;
        this.items = [];

        if ( props && props.items ) {
            var newItems = [];
            for ( var i=0 ; i<props.items.length ; i++ ) {
                newItems.push(new LocalActivityInfoItem(props.items[i]));
            }

            this.items = newItems;
        }
    }

    Util.inherit(LocalActivityInfo, InfoClass);

    return LocalActivityInfo;
});
/**
 * Created by careerBox on 2014-12-16.
 */



define('classes/Info/GlobalActivityInfo',[
    'classes/Util',
    'classes/Info/InfoClass',
    'classes/Info/GlobalActivityInfoItem',
    'classes/Enums/InfoType'
], function (Util, InfoClass, GlobalActivityInfoItem, InfoType) {

    function GlobalActivityInfo(props) {

        InfoClass.call(this, props);

        this.title = '해외활동';
        this.infoType = InfoType.globalActivityInfo;
        this.items = [];

        if ( props && props.items ) {
            var newItems = [];
            for ( var i=0 ; i<props.items.length ; i++ ) {
                newItems.push(new GlobalActivityInfoItem(props.items[i]));
            }

            this.items = newItems;
        }
    }

    Util.inherit(GlobalActivityInfo, InfoClass);

    return GlobalActivityInfo;
});
/**
 * Created by careerBox on 2014-12-16.
 */



define('classes/Info/ProjectInfo',[
    'classes/Util',
    'classes/Info/InfoClass',
    'classes/Info/ProjectInfoItem',
    'classes/Enums/InfoType'
], function (Util, InfoClass, ProjectInfoItem, InfoType) {

    function ProjectInfo(props) {

        InfoClass.call(this, props);

        this.title = '프로젝트';
        this.infoType = InfoType.projectInfo;
        this.items = [];

        if ( props && props.items ) {
            var newItems = [];
            for ( var i=0 ; i<props.items.length ; i++ ) {
                newItems.push(new ProjectInfoItem(props.items[i]));
            }

            this.items = newItems;
        }
    }

    Util.inherit(ProjectInfo, InfoClass);

    return ProjectInfo;
});
/**
 * Created by careerBox on 2014-12-16.
 */



define('classes/Info/ColumnInfo',[
    'classes/Util',
    'classes/Info/InfoClass',
    'classes/Info/ColumnInfoItem',
    'classes/Enums/InfoType'
], function (Util, InfoClass, ColumnInfoItem, InfoType) {

    function ProjectInfo(props) {

        InfoClass.call(this, props);

        this.title = '칼럼';
        this.infoType = InfoType.columnInfo;
        this.items = [];

        if ( props && props.items ) {
            var newItems = [];
            for ( var i=0 ; i<props.items.length ; i++ ) {
                newItems.push(new ColumnInfoItem(props.items[i]));
            }

            this.items = newItems;
        }
    }

    Util.inherit(ProjectInfo, InfoClass);

    return ProjectInfo;
});
/**
 * Created by JEONGBORAM-PC-W1 on 2014-12-16.
 */
define('service/InformationData',[
    'app',
    'classes/Info/PersonalInfo',
    'classes/Info/AdditionalInfo',
    'classes/Info/HighSchoolInfo',
    'classes/Info/UnivSchoolInfo',
    'classes/Info/WorkingInfo',
    'classes/Info/CertificationAbilityInfo',
    'classes/Info/ProficiencyInfo',
    'classes/Info/ComputerAbilityInfo',
    'classes/Info/PaperAbilityInfo',
    'classes/Info/ScholarshipInfo',
    'classes/Info/AwardInfo',
    'classes/Info/LocalActivityInfo',
    'classes/Info/GlobalActivityInfo',
    'classes/Info/ProjectInfo',
    'classes/Info/ColumnInfo'
], function (app, PersonalInfo, AdditionalInfo, HighSchoolInfo, UnivSchoolInfo, WorkingInfo, CertificationAbilityInfo, ProficiencyInfo, ComputerAbilityInfo, PaperAbilityInfo, ScholarshipInfo, AwardInfo, LocalActivityInfo, GlobalActivityInfo, ProjectInfo, ColumnInfo) {

    var InformationData = {
        personalInfo : new PersonalInfo(),
        additionalInfo : new AdditionalInfo(),
        highSchoolInfo : new HighSchoolInfo(),
        univSchoolInfo : new UnivSchoolInfo(),
        workingInfo : new WorkingInfo(),
        certificateAbilityInfo : new CertificationAbilityInfo(),
        proficiencyInfo : new ProficiencyInfo(),
        computerAbilityInfo : new ComputerAbilityInfo(),
        paperAbilityInfo : new PaperAbilityInfo(),
        scholarshipInfo : new ScholarshipInfo(),
        awardInfo : new AwardInfo(),
        localActivityInfo : new LocalActivityInfo(),
        globalActivityInfo : new GlobalActivityInfo(),
        projectInfo : new ProjectInfo(),
        columnInfo : new ColumnInfo()
    };

    app.factory('InformationData', function () {
        return InformationData;
    });

    return InformationData;
});


/**
 * Created by gimbyeongjin on 14. 12. 19..
 */
define('service/GetInformation',[
    'jquery',
    'angular',
    'app',
    'service/InformationData',
    'service/serverURL'
], function($, ng, app) {
    app.factory('GetInformation', ['$http', '$q', 'InformationData', 'serverURL', function ($http, $q, InformationData, serverURL) {

        function loadPersonalInfo() {
            var loadPersonalPromiss = $http.get(serverURL + '/info/personal', {withCredentials: true});
            var loadAdditionalPromiss = $http.get(serverURL + '/info/additional', {withCredentials: true});

            $q.all([loadPersonalPromiss, loadAdditionalPromiss]).then(function (resultArray) {
                if(resultArray[0].data.result !== null){
                    InformationData.personalInfo = resultArray[0].data.result;
                }
                if(resultArray[1].data.result !== null){
                    InformationData.additionalInfo = resultArray[1].data.result;
                }
            });
        }

        function loadSchoolInfo() {
            var loadHighSchoolPromiss = $http.get(serverURL + '/info/highSchool', {withCredentials: true});
            var loadUnivSchoolPromiss = $http.get(serverURL + '/info/univSchool', {withCredentials: true});

            $q.all([loadHighSchoolPromiss, loadUnivSchoolPromiss]).then(function (resultArray) {
                if(resultArray[0].data.result !== null) {
                    InformationData.highSchoolInfo = resultArray[0].data.result;
                }
                if(resultArray[1].data.result !== null) {
                    InformationData.univSchoolInfo = resultArray[1].data.result;
                }
            });
        }

        function loadWorkingInfo() {
            var loadWorkingPromiss = $http.get(serverURL + '/info/working', {withCredentials: true});

            $q.all([loadWorkingPromiss]).then(function (resultArray) {
                if(resultArray[0].data.result !== null) {
                    InformationData.workingInfo = resultArray[0].data.result;
                }
            });
        }

        function loadAbilityInfo() {
            var loadCertificationAbilityPromiss = $http.get(serverURL + '/info/certificationAbility', {withCredentials: true});
            var loadProficiencyPromiss = $http.get(serverURL + '/info/proficiency', {withCredentials: true});
            var loadComputerAbilityPromiss = $http.get(serverURL + '/info/computerAbility', {withCredentials: true});
            var loadPaperAbilityPromiss = $http.get(serverURL + '/info/paperAbility', {withCredentials: true});

            $q.all([loadCertificationAbilityPromiss, loadProficiencyPromiss, loadComputerAbilityPromiss, loadPaperAbilityPromiss]).then(function (resultArray) {
                if(resultArray[0].data.result !== null) {
                    InformationData.certificateAbilityInfo = resultArray[0].data.result;
                }
                if(resultArray[1].data.result !== null) {
                    InformationData.proficiencyInfo = resultArray[1].data.result;
                }
                if(resultArray[2].data.result !== null) {
                    InformationData.computerAbilityInfo = resultArray[2].data.result;
                }
                if(resultArray[3].data.result !== null) {
                    InformationData.paperAbilityInfo = resultArray[3].data.result;
                }
            });
        }

        function loadAwardInfo() {
            var loadScholarshipPromiss = $http.get(serverURL + '/info/scholarship', {withCredentials: true});
            var loadAwardPromiss = $http.get(serverURL + '/info/award', {withCredentials: true});

            $q.all([loadScholarshipPromiss, loadAwardPromiss]).then(function (resultArray) {
                if(resultArray[0].data.result !== null) {
                    InformationData.scholarshipInfo = resultArray[0].data.result;
                }
                if(resultArray[1].data.result !== null) {
                    InformationData.awardInfo = resultArray[1].data.result;
                }
            });
        }

        function loadActivityInfo() {
            var loadLocalActivityPromiss = $http.get(serverURL + '/info/localActivity', {withCredentials: true});
            var loadGlobalActivityPromiss = $http.get(serverURL + '/info/globalActivity', {withCredentials: true});

            $q.all([loadLocalActivityPromiss, loadGlobalActivityPromiss]).then(function (resultArray) {
                if(resultArray[0].data.result !== null) {
                    InformationData.localActivityInfo = resultArray[0].data.result;
                }
                if(resultArray[1].data.result !== null) {
                    InformationData.globalActivityInfo = resultArray[1].data.result;
                }
            });
        }

        function loadProjectInfo() {
            var loadProjectPromiss = $http.get(serverURL + '/info/project', {withCredentials: true});

            $q.all([loadProjectPromiss]).then(function (resultArray) {
                if(resultArray[0].data.result !== null) {
                    InformationData.projectInfo = resultArray[0].data.result;
                }
            });
        }

        function loadColumnInfo() {
            var loadColumnPromiss = $http.get(serverURL + '/info/column', {withCredentials: true});

            $q.all([loadColumnPromiss]).then(function (resultArray) {
                if(resultArray[0].data.result !== null) {
                    InformationData.columnInfo = resultArray[0].data.result;
                }
            });
        }
        function loadAllInfo(){
            loadPersonalInfo();
            loadSchoolInfo();
            loadWorkingInfo();
            loadAwardInfo();
            loadAbilityInfo();
            loadActivityInfo();
            loadProjectInfo();
            loadColumnInfo();
        }

        return {
            'loadPersonalInfo'    : loadPersonalInfo,
            'loadSchoolInfo'      : loadSchoolInfo,
            'loadWorkingInfo'     : loadWorkingInfo,
            'loadAwardInfo'       : loadAwardInfo,
            'loadAbilityInfo'     : loadAbilityInfo,
            'loadActivityInfo'    : loadActivityInfo,
            'loadProjectInfo'     : loadProjectInfo,
            'loadColumnInfo'      : loadColumnInfo,
            'loadAllInfo'         : loadAllInfo
        };

    }]);
});

/**
 * Created by JEONGBORAM-PC-W1 on 2014-12-20.
 */
define('service/getInformationByType',['app', 'service/serverURL'], function (app) {
    app.factory('getInformationByType', ['serverURL', function (serverURL) {
        return function ($http, infoType, callback) {
            var type = infoType.split('Info')[0];
            $http({
                method: 'GET',
                url: serverURL + '/info/' + type,
                responseType: 'json',
                withCredentials: true
            }).success(function (data) {
                callback(data);
            }).error(function (data) {
                callback(data);
            });
        };
    }]);
});
/**
 * Created by JEONGBORAM-PC-W1 on 2014-12-20.
 */
define('service/getInformationItem',[
    'app',
    'classes/Enums/InfoType',
    'classes/Info/PersonalInfoItem', // 개인정보
    'classes/Info/AdditionalInfoItem', // 추가정보
    'classes/Info/HighSchoolInfoItem', // 고등학교
    'classes/Info/UnivSchoolInfoItem', // 대학교
    'classes/Info/WorkingInfoItem', // 경력
    'classes/Info/CertificationAbilityInfoItem', // 자격증
    'classes/Info/ProficiencyInfoItem', // 외국어
    'classes/Info/ComputerAbilityInfoItem', // 컴퓨터 활용 능력
    'classes/Info/PaperAbilityInfoItem', // 논문
    'classes/Info/ScholarshipInfoItem', // 장학금
    'classes/Info/AwardInfoItem', // 수상내역
    'classes/Info/LocalActivityInfoItem', // 국내활동
    'classes/Info/GlobalActivityInfoItem', // 국외활동
    'classes/Info/ProjectInfoItem', // 프로젝트
    'classes/Info/ColumnInfoItem'  // 칼럼
], function (app, InfoType, PersonalInfoItem, AdditionalInfoItem, HighSchoolInfoItem, UnivSchoolInfoItem, WorkingInfoItem, CertificationAbilityInfoItem, ProficiencyInfoItem, ComputerAbilityInfoItem,
             PaperAbilityInfoItem, ScholarshipInfoItem, AwardInfoItem, LocalActivityInfoItem, GlobalActivityInfoItem, ProjectInfoItem, ColumnInfoItem) {
    app.factory('getInformationItem', function () {
        return function (infoType) {

            return getItem(infoType);
        };

        function getItem(infoType){
            switch (infoType){
                case InfoType.personalInfo:
                    return new PersonalInfoItem();
                case InfoType.additionalInfo:
                    return new AdditionalInfoItem();
                case InfoType.highSchoolInfo:
                    return new HighSchoolInfoItem();
                case InfoType.univSchoolInfo:
                    return new UnivSchoolInfoItem();
                case InfoType.workingInfo:
                    return new WorkingInfoItem();
                case InfoType.certificationAbilityInfo:
                    return new CertificationAbilityInfoItem();
                case InfoType.proficiencyInfo:
                    return new ProficiencyInfoItem();
                case InfoType.computerAbilityInfo:
                    return new ComputerAbilityInfoItem();
                case InfoType.paperAbilityInfo:
                    return new PaperAbilityInfoItem();
                case InfoType.scholarshipInfo:
                    return new ScholarshipInfoItem();
                case InfoType.awardInfo:
                    return new AwardInfoItem();
                case InfoType.localActivityInfo:
                    return new LocalActivityInfoItem();
                case InfoType.globalActivityInfo:
                    return new GlobalActivityInfoItem();
                case InfoType.projectInfo:
                    return new ProjectInfoItem();
                case InfoType.columnInfo:
                    return new ColumnInfoItem();
            }
        }
    });
});
/**
 * Created by gimbyeongjin on 14. 11. 11..
 */
define('service/getPortfolioList',['app','service/serverURL'], function(app) {
    app.factory('getPortfolioList', ['serverURL', function (serverURL) {
        return function ($http, callback) {
            $http({
                method: 'GET',
                url: serverURL + '/portfolio',
                responseType: 'json',
                withCredentials: true
            }).success(function (data) {
                callback(data);
            }).error(function(data) {
                callback(data);
            });
        };
    }]);
});
/**
 * Created by JEONGBORAM-PC-W1 on 2014-12-23.
 */
define('service/getTemplate',['app', 'service/serverURL'], function (app) {
    app.factory('getTemplate', ['serverURL', function (serverURL) {
        return function ($http, _id, callback) {
            $http({
                method: 'GET',
                url: serverURL + '/template/preview/' + _id,
                responseType: 'json',
                withCredentials: true
            }).success(function (data) {
                callback(data);
            });
        };
    }]);
});
/**
 * Created by JEONGBORAM-PC-W1 on 2014-11-16.
 */
define('service/getTemplateList',['app', 'service/serverURL'], function (app) {
    app.factory('getTemplateList', ['serverURL', function (serverURL) {
        return function ($http, infoType, callback) {
            var url = serverURL + '/template';
            if(infoType !== ''){
                url = url + '/' + infoType;
            }

            $http({
                method: 'GET',
                url: url,
                responseType: 'json',
                withCredentials: true
            }).success(function (data) {
                callback(data);
            });
        };
    }]);
});


/**
 * Created by JEONGBORAM-PC-W1 on 2014-12-26.
 */
define('service/getTemplateListBasic',['app', 'service/serverURL'], function (app) {
    app.factory('getTemplateListBasic', ['serverURL', function (serverURL) {
        return function ($http, infoType, callback) {
            var url = serverURL + '/template/basic/list';
            if(infoType !== ''){
                url = url + '/' + infoType;
            }

            $http({
                method: 'GET',
                url: url,
                responseType: 'json',
                withCredentials: true
            }).success(function (data) {
                callback(data);
            });
        };
    }]);
});
/**
 * Created by JEONGBORAM-PC-W1 on 2014-11-25.
 */
define('service/HTMLGenerator',['app'], function (app) {
    function loadItem(item, id, option) {
        var domObj = '<div id="' + id + '" ng-click ';

        if(option.draggable === true){
            domObj += 'draggable ';
        }
        if(option.resizable === true){
            domObj += 'resizable ';
        }
        if(option.rotatable === true){
            domObj += 'rotatable ';
        }

        var itemType = item.itemType;

        if (itemType === 'text') {
            domObj += 'common-attribute text class="itemText" ';
        } else if (itemType === 'image') {
            domObj += 'common-attribute image class="itemImage" ';
        } else if (itemType === 'line') {
            domObj += 'line ';
        } else if (itemType === 'link') {
            domObj += 'common-attribute link class="itemLink" ';
        } else if (itemType === 'shape') {
            domObj += 'common-attribute shape class="itemShape" ';
        }

        domObj += 'style="position: absolute; top: ' + item.pos.y + 'px; left: ' + item.pos.x + 'px; width: ' + item.size.width + 'px; height: ' + item.size.height + 'px;"></div>';

        return domObj;
    }

    function loadDivDom(item, option) {
        var domObj = '<div id="' + item._id + '" ng-click common-attribute ';

        if(option.draggable === true){
            domObj += 'draggable ';
        }
        if(option.resizable === true){
            domObj += 'resizable ';
        }
        //
        if(option.grid === true){
            domObj += 'grid ';
        }
        // 배열일 경우 row 추가
        if(option.row!==null){
            domObj += 'row='+ option.row +' ' ;
        }
        // 배열일 경우 col 추가
        if(option.col!==null){
            domObj += 'col='+ option.col +' ' ;
        }


        domObj += 'style="position: absolute; top: ' + item.pos.y + 'px; left: ' + item.pos.x + 'px; width: ' + item.size.width + 'px; height: ' + item.size.height + 'px;">';

        return domObj;
    }

    function HTMLGenerator(operation, model, id, option) {
        if (operation === 'loadItem') {
            return loadItem(model, id, option);
        } else if (operation === 'loadDivDom') {
            return loadDivDom(model, option);
        }
    }

    app.factory('HTMLGenerator', function () {
        return HTMLGenerator;
    });
});
/**
 * Created by careerBox on 2014-11-12.
 */



define('classes/Member',[], function () {

    function Member(props) {
        this._id = null;
        this.email = '';
        this.isFacebook = false;
        this.password = '';

        // server only
        this.timestamp = new Date();

        if (props) {
            this._id = props._id ? props._id : null;
            this.email = props.email ? props.email : this.email;
            this.isFacebook = (props.isFacebook!==undefined) ? props.isFacebook : this.isFacebook;
            this.password = props.password ? props.password : this.password;

            this.timestamp = props.timestamp ? props.timestamp : this.timestamp;
        }
    }

    return Member;
});

/**
 * Created by gimbyeongjin on 14. 10. 24..
 */
define('service/httpJoin',['app',
    'classes/Member',
    'service/serverURL'
], function (app, Member) {
    app.factory('httpJoin', ['serverURL','$http', function (serverURL, $http) {
        return function (email, password, callback) {
            var member = new Member();
            member.email = email;
            member.password = password;
            member.isFacebook = false;
            $http({
                method: 'POST',
                url: serverURL + '/member/join',
                responseType: 'json',
                data: {member : member},
                withCredentials: true
            }).success(function (data) {
                callback(data);
            }).error(function(data) {
                callback(data);
            });
        };
    }]);
});

/**
 * Created by gimbyeongjin on 14. 10. 24..
 */
define('service/httpLogin',['app',
    'classes/Member',
    'service/serverURL'
], function (app, Member) {
    app.factory('httpLogin', ['serverURL', '$http', function (serverURL, $http) {
        return function (email, password, isFacebook, callback) {
            var member = new Member();
            member.email = email;
            member.password = password;
            member.isFacebook = isFacebook;
            $http({
                method: 'POST',
                url: serverURL + '/member/login',
                responseType: 'json',
                data: {member: member},
                withCredentials: true
            }).success(function (data) {
                callback(data);
            }).error(function (data) {
                callback(data);
            });
        };
    }]);
});

/**
 * Created by gimbyeongjin on 14. 10. 24..
 */
define('service/httpLogout',['app',
    'service/serverURL'
], function(app) {
    app.factory('httpLogout', ['serverURL','$http', function (serverURL,$http) {
        return function (callback) {
            $http({
                method: 'get',
                url: serverURL + '/member/logout',
                responseType: 'json',
                withCredentials: true
            }).success(function (data) {
                callback(data);
            }).error(function(data) {
                callback(data);
            });
        };
    }]);
});
/**
 * Created by JEONGBORAM-PC-W1 on 2014-12-20.
 */
define('service/ImageUpload',['app', 'service/serverURL'], function (app) {
    app.factory('ImageUpload', ['serverURL', function (serverURL) {
        return function ($upload, files, type, progressCallBack, successCallBack) {

            function onProgress(evt) {
                progressCallBack(evt);
            }

            function onSuccess(data) {
                successCallBack(data);
            }

            for (var i = 0; i < files.length; i++) {
                var file = files[i];
                $upload.upload({
                    url: serverURL + '/image/'+type,
                    method: 'POST',
                    withCredentials: true,
                    file: file
                }).progress(onProgress).success(onSuccess);
            }
        };
    }]);
});
/**
 * Created by gimbyeongjin on 14. 11. 14..
 */

define('service/loadArticle',[
    'app',
    'classes/LayoutComponents/Article',
    'service/HTMLGenerator',
    'service/EditorData'

], function (app, Article) {
    app.factory('loadArticle', function (HTMLGenerator, EditorData, $compile) {

        function loadArticle(_article, $scope) {
            var articleGroup = new Article(_article);
            var bindingCount = _article.bindingData.length === 0 ? 1 : _article.bindingData.length;
            articleGroup.size.width = (_article.size.width * _article.colCount);
            articleGroup.size.height = (_article.size.height * _article.rowCount);

            var articleGroupDom = HTMLGenerator('loadDivDom', articleGroup, '', {
                draggable: true,
                resizable: false,
                grid: true
            });

            var article;
            for (var row = 0; row < _article.rowCount; row++) {
                for (var col = 0; col < _article.colCount; col++) {
                    var index = (row * _article.colCount) + col;
                    // Prevent to load Binding Item of null binding data
                    if (index >= bindingCount) {
                        break;
                    }

                    article = new Article(_article);

                    article.col = col;
                    article.row = row;

                    article.childArr = _article.childArr[index];
                    if (article.childArr) {
                        article.tempIndex = index;
                        articleGroupDom += loadArticleDom(article);
                    }
                }
            }

            articleGroupDom += '</div>';

            $('#canvas-content').append($compile(articleGroupDom)($scope));
        }

        function loadArticleDom(article) {
            article._id += '_' + article.tempIndex;
            var ArticleDom = HTMLGenerator('loadDivDom', article, '', {
                draggable: false,
                resizable: false,
                row: article.row,
                col: article.col
            });

            var templateItemArray = article.childArr;
//            EditorData.end_zOrder++;

            var articleItemId;

            for (var index = 0; index < templateItemArray.length; index++) {
                // Item of article 's id = template id_item id
                articleItemId = article._id + '_load_' + templateItemArray[index]._id + '_' + article.tempIndex;
                ArticleDom += HTMLGenerator('loadItem', templateItemArray[index], articleItemId, {
                    draggable: false,
                    resizable: false
                });
            }

            ArticleDom += '</div>';

            return ArticleDom;
        }


        return loadArticle;
    });

});
/**
 * Created by JEONGBORAM-PC-W1 on 2014-10-24.
 */
define('service/LoadPaper',['app', 'service/serverURL'], function (app) {
    app.factory('LoadPaper', ['serverURL', function (serverURL) {
        return function ($http, paperId, callback) {
            $http({
                method: 'GET',
                url: serverURL + '/portfolio/paper/' + paperId,
                responseType: 'json',
                withCredentials: true
            }).success(function (data) {
                callback(data);
            });
        };
    }]);
});

/**
 * Created by gimbyeongjin on 14. 11. 14..
 */

define('service/loadPaperDom',[
    'app',
    'classes/LayoutComponents/Article',
    'service/HTMLGenerator',
    'service/EditorData',
    'service/loadArticle'

], function(app) {
    app.factory('loadPaperDom', function (HTMLGenerator, EditorData, $compile, loadArticle) {

        function loadPaperDom(paper, $scope) {
            var paperChildArr = paper.childArr;
            $('#canvas-content').find('div').remove();
            // z index 초기화
            EditorData.end_zOrder = 0;
            EditorData.start_zOrder = 0;

            $compile($('#canvas-content'))($scope); // 페이퍼 속성을 적용시켜줌.

            var child;
            for (var index = 0; index < paperChildArr.length; index++) {
                child = paperChildArr[index];
                EditorData.childArr[child._id] = child;
                if (child.childArr) {
                    loadArticle(child, $scope);

                } else {
                    loadItem(child, $scope);
                }
                EditorData.end_zOrder++;
            }
        }

        function loadItem(item, $scope) {
            var option = {draggable: true, resizable: true, rotatable: true};

            var domObj = HTMLGenerator('loadItem', item, item._id, option);

            $('#canvas-content').append($compile(domObj)($scope));
        }

        return loadPaperDom;
    });

});
/**
 * Created by JEONGBORAM-PC-W1 on 2014-11-22.
 */
define('service/LoadPaperList',['app', 'service/serverURL'], function(app) {
    app.factory('LoadPaperList', ['serverURL', function (serverURL) {
        return function ($http, portfolioId, callback) {
            $http({
                method: 'POST',
                url: serverURL + 'serverURL/portfolio/paperList',
                data: {_portfolio_id : portfolioId},
                responseType: 'json',
                withCredentials: true
            }).success(function (data) {
                callback(data);
            });
        };
    }]);
});

/**
 * Created by gimbyeongjin on 14. 10. 24..
 */

define('service/memberCallback',['app'
], function(app) {
    app.factory('memberCallback', [ function () {
        return function($window, $scope, data, href) {
            var stateText = "";
            // Error
            if(data === null){
                stateText = "서버와의 연결이 되지 않았습니다.";
            }

            // Success
            else if (data.returnCode === '000') {
                // 성공 메세지
                stateText = "성공하였습니다.";
                // 에디터 화면으로 이동
                $window.location.href = href; //"#/articleEditor";
            }

            // Invalid Arguments
            else if (data.returnCode === '001') {
                // 오류 발생 메세지
                stateText = "오류 발생";
            }

            // Not Login
            else if (data.returnCode === '002') {
                // 로그인 안됬다. 메세지
                stateText = "로그인이 안되어있습니다.";
                window.location.href = "../partials/login.html";
            }

            // Incorrect ID or PW
            else if (data.returnCode === '101') {
                // 잘못된 형식의 아이디이거나 패스워드라는 메세지
                stateText = "잘못된 형식의 아이디이거나 패스워드입니다.";
            }

            // Exist Email
            else if (data.returnCode === '102') {
                // 이미 존재하는 이메일이라는 메세지
                stateText = "이미 존재하는 이메일입니다.";
            }
            $scope.msgs.push(stateText);
        };

    }]);
});
/**
 * Created by careerBox on 2014-10-19.
 */

define('service/memberlist',['app', 'service/serverURL'], function(app) {
    app.factory('memberlist', ['$http', 'serverURL', function($http, serverURL) {
        return $http.get(serverURL + '/member/list');
    }]);
});
/**
 * Created by gimbyeongjin on 14. 11. 11..
 */

define('service/modifyPortfolio',['app','service/serverURL'], function(app) {
    app.factory('modifyPortfolio', ['serverURL', function (serverURL) {
        return function ($http, data, callback) {
            $http({
                method: 'PUT',
                url: serverURL + '/portfolio',
                data: data,
                responseType: 'json',
                withCredentials: true,
                headers: {
                    'Content-Type': 'application/json'
                }
            }).success(function (data) {
                callback(data);
            });
        };
    }]);
});
/**
 * Created by gimbyeongjin on 14. 11. 30..
 */
define('service/SetAttributeInformation',[
    'app',
    'service/EditorData'
], function (app) {
    app.factory('SetAttributeInformation', function (EditorData) {
        return function (id) {
            // 템플릿
            if (isTemplate(window.location.href)) {
                // 템플릿일 경우
                if (EditorData.template._id === id || id === "canvas-content") {
                    return {
                        parentArray: EditorData.template,
                        attributeInformation: EditorData.template.target,
                        type: 'template'
                    };
                } else { // 템플릿 안의 요소들일 경우
                    return {
                        parentArray: EditorData.templateItemArray,
                        attributeInformation: EditorData.templateItemArray[id],
                        type: 'template_item'
                    };
                }
            }

            // 페이퍼

            // 페이퍼일 경우
            if (id === 'canvas-content' || id === EditorData.paper._id) {
                return {
                    parentArray: EditorData,
                    attributeInformation: EditorData.paper,
                    type: 'paper'
                };
            }

            // 아티클 안의 요소들일 경우
            var idArray = "";
            if (typeof id === 'string') {
                if (id.indexOf("_")) {
                    idArray = id.split("_");
                }
            }

            var articleId;
            // 배열아이디가 있을 경우
            if (idArray.length >= 4) {
                // 아이디 파싱
                var childID;
                var arrayId;
                if (isLoaded(id)) {
                    articleId = id.split("_")[0] + "_" + id.split("_")[1];
                    childID = id.split("_load_")[1].split("_")[0];
                    arrayId = id.split("_")[2];
                }
                else {
                    articleId = id.split("_")[0] + "_" + id.split("_")[1];
                    childID = id.split("_")[3];
                    arrayId = id.split("_")[2];
                }

                // 모델 경로 설정 ** EditorData.childArr -> article
                var articleModel = EditorData.childArr[articleId].childArr[arrayId];
                for (var key in articleModel) {
                    if (articleModel[key]._id === childID) {
                        return {
                            parentArray: articleModel,
                            attributeInformation: articleModel[key],
                            type: 'article_item'
                        };
                    }
                }
            }

            // 페이퍼에디터에서 아티클 자체이거나 아이템인 경우
            else if (typeof id === 'string' && id.split("_").length === 3) {
                // 아이디 파싱
                articleId = id.split("_")[0] + "_" + id.split("_")[1];

                return {
                    parentArray: EditorData.childArr,
                    attributeInformation: EditorData.childArr[articleId],
                    type: 'article'
                };
            }
            // 페이퍼에서 아이템일경우
            else {
                return {
                    parentArray: EditorData.childArr,
                    attributeInformation: EditorData.childArr[id],
                    type: 'paper_item'
                };
            }

            function isLoaded(id) {
                if (id.indexOf('load') >= 0) {
                    return true;
                } else {
                    return false;
                }
            }

            function isTemplate(url) {
                if ((url.indexOf('TemplateEditor') >= 0) || (url.indexOf('templatePreview') >= 0)) {
                    return true;
                } else {
                    return false;
                }
            }
        };
    });
});
/**
 * Created by careerBox on 2014-12-23.
 */

define('service/WaitServer',[
    'app',
    'jquery'
], function (app, $) {

    function show(msec) {

        if ($('#WaitServerDiv').length !== 0) {
            return;
        }

//        $('<img id="WaitServerImg" src="../img/progress.gif">').
//            css({
//                left: '50%',
//                display: 'block',
//                top: '50%',
//                position: 'fixed',
//                'margin-top': '-100px',
//                'margin-left': '-100px',
//                'z-index': 65536,
//               'border-radius': '50%'
//            }).prependTo($('body'));

        $('<div id="WaitServerImgWrapper" class="progressCrop"><img id="WaitServerImg" src="../img/preload.gif"></div>').
//        $('<img id="WaitServerImg" src="../img/preload.gif">').

            css({
                left: '50%',
                display: 'block',
                top: '50%',
                position: 'fixed',
                'margin-top': '-350px',
                'margin-left': '-460.5px',
                'z-index': 65536
//                'border-radius': '50%'
            }).prependTo($('body'));

        $('<div id="WaitServerDiv"></div>')
            .css('position', 'fixed')
            .css('z-index', 65535)
            .css('overflow-x', 'hidden')
            .css('overflow-y', 'auto')
            .width('100%')
            .height('100%')
            .css('background-color', 'black')
            .css('opacity', 0.5)
            .css('display', 'block')
            .css('margin', 0)
            .css('padding', 0)
            .prependTo($('body'))
            .fadeIn('slow');

        if (msec) {
            setTimeout(hide, msec);
        }
    }

    function hide() {
        $('#WaitServerImg').remove();
        $('#WaitServerImgWrapper').remove();
        $('#WaitServerDiv').remove();
    }

    var exports = {
        show: show,
        hide: hide
    };

    app.factory('WaitServer', [function () {
        return exports;
    }]);
});
/**
 * Created by JEONGBORAM-PC-W1 on 2014-10-24.
 */
define('service/SavePaper',['app', 'service/WaitServer', 'service/serverURL'], function (app) {
    app.factory('SavePaper', ['WaitServer', 'serverURL', function (WaitServer, serverURL) {
        return function ($http, paper, callback) {
            WaitServer.show();
            $http({
                method: 'POST',
                url: serverURL + '/portfolio/paper',
                data: paper,
                responseType: 'json',
                withCredentials: true
            }).success(function (data) {
                WaitServer.hide();
                callback(data);
            });
        };
    }]);
});

/**
 * Created by JEONGBORAM-PC-W1 on 2014-12-23.
 */

define('service/reloadPaper',[
    'app',
    'service/HTMLGenerator',
    'service/EditorData',
    'service/SetAttributeInformation',
    'service/SavePaper',
    'service/LoadPaper',
    'service/loadPaperDom'
], function (app) {
    app.factory('reloadPaper', function (HTMLGenerator, EditorData, SetAttributeInformation, SavePaper, LoadPaper, $http, $compile, loadPaperDom) {
        function reloadPaper($scope, callback) {

            var paper = EditorData.paper;
            paper.childArr = getPaperChildArr(EditorData.childArr);

            //페이퍼 저장
            var data = {_portfolio_id: EditorData.portfolio._id, paper: paper};

            SavePaper($http, data, function (result) {
                if (result.returnCode === '000') {
                    // 페이퍼 로드
                    LoadPaper($http, EditorData.paperId, function (result) {
                        EditorData.paper = result.result;
                        EditorData.paperTitle = result.result.title;

                        loadPaperDom(EditorData.paper, $scope);

                        // 어트리뷰트 모델 강제 변경
                        $scope.$emit('changeAttributePanelModel');

                        callback();
                    });
                }
                //} else if (result.returnCode === '001') {
                //} else if (result.returnCode === '002') {
                //}
            });
        }

        function getPaperChildArr(childArr) {
            var paperChildArr = [];

            for (var key in childArr) {
                var child = childArr[key];

                if (child.state === 'new') {
                    delete child._id;
                }

                if (child.state === 'del') {
                    continue;
                }

                delete  child.state;

                paperChildArr.push(child);
            }

            return paperChildArr;
        }

        return reloadPaper;
    });

});
/**
 * Created by JEONGBORAM-PC-W1 on 2014-11-16.
 */
define('service/SaveTemplate',['app', 'service/WaitServer', 'service/serverURL'], function (app) {
    app.factory('SaveTemplate', ['WaitServer', 'serverURL', function (WaitServer, serverURL) {
        return function ($http, template, callback) {
            WaitServer.show();
            $http({
                method: 'POST',
                url: serverURL + '/template',
                data: {template: template},
                responseType: 'json',
                withCredentials: true
            }).success(function (data) {
                WaitServer.hide();
                callback(data);
            });
        };
    }]);
});


/**
 * Created by JEONGBORAM-PC-W1 on 2014-10-24.
 */
define('service/SetIndex',['app', 'service/WaitServer', 'service/serverURL'], function (app) {
    app.factory('SetIndex', ['$http', 'WaitServer', 'serverURL', function ($http, WaitServer, serverURL) {
        return function (data, callback) {
            WaitServer.show();
            $http({
                method: 'POST',
                url: serverURL + '/portfolio/paper/setIndex',
                data: data,
                responseType: 'json',
                withCredentials: true
            }).success(function (result) {
                WaitServer.hide();
                callback(result);
            });
        };
    }]);
});

/**
 * Created by gimbyeongjin on 14. 12. 8..
 */
define('service/SetZOrder',[
    'app',
    'service/EditorData'
], function (app) {
    app.factory('SetZOrder', function (EditorData) {
        function SetZOrder(model, id) {
            // 아티클 안의 아이템이 아닐 경우
            if (!(typeof id === 'string' && id.indexOf("_") && id.split("_").length >= 3)) {
                EditorData.end_zOrder++;
                model.zOrder = EditorData.end_zOrder;
            }
        }

        return SetZOrder;
    });
});
/**
 * Created by careerBox on 2014-12-22.
 */

require([
    'service/applyCommonItemAttribute',
    'service/CommonCallback',
    'service/createPortfolio',
    'service/deleteImage',
    'service/deletePaper',
    'service/deletePortfolio',
    'service/deleteTemplate',
    'service/EditorData',
    'service/fileUpload',
    'service/getAttributeNames',
    'service/getAvailableAttribute',
    'service/GetInformation',
    'service/getInformationByType',
    'service/getInformationItem',
    'service/getPortfolioList',
    'service/getTemplate',
    'service/getTemplateList',
    'service/getTemplateListBasic',
    'service/HTMLGenerator',
    'service/httpJoin',
    'service/httpLogin',
    'service/httpLogout',
    'service/ImageUpload',
    'service/InformationData',
    'service/loadArticle',
    'service/LoadPaper',
    'service/loadPaperDom',
    'service/LoadPaperList',
    'service/memberCallback',
    'service/memberlist',
    'service/modifyPortfolio',
    'service/reloadPaper',
    'service/SavePaper',
    'service/SaveTemplate',
    'service/serverURL',
    'service/SetAttributeInformation',
    'service/SetIndex',
    'service/SetZOrder',
    'service/WaitServer'
], function () {
});
define("service/services", function(){});

